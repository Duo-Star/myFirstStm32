
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e10  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08002ff8  08002ff8  00003ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f8  080031f8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080031f8  080031f8  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080031f8  080031f8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f8  080031f8  000041f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031fc  080031fc  000041fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003200  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800320c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800320c  0000502c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b9a  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ecd  00000000  00000000  00007bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e0  00000000  00000000  00008aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002c6  00000000  00000000  00008e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001834d  00000000  00000000  00009146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004c79  00000000  00000000  00021493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da46  00000000  00000000  0002610c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3b52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001160  00000000  00000000  000b3b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000b4cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000000c 	.word	0x2000000c
 8000204:	00000000 	.word	0x00000000
 8000208:	08002fe0 	.word	0x08002fe0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000010 	.word	0x20000010
 8000224:	08002fe0 	.word	0x08002fe0

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	@ 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__gedf2>:
 80007f4:	f04f 3cff 	mov.w	ip, #4294967295
 80007f8:	e006      	b.n	8000808 <__cmpdf2+0x4>
 80007fa:	bf00      	nop

080007fc <__ledf2>:
 80007fc:	f04f 0c01 	mov.w	ip, #1
 8000800:	e002      	b.n	8000808 <__cmpdf2+0x4>
 8000802:	bf00      	nop

08000804 <__cmpdf2>:
 8000804:	f04f 0c01 	mov.w	ip, #1
 8000808:	f84d cd04 	str.w	ip, [sp, #-4]!
 800080c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000810:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000814:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800081e:	d01b      	beq.n	8000858 <__cmpdf2+0x54>
 8000820:	b001      	add	sp, #4
 8000822:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000826:	bf0c      	ite	eq
 8000828:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800082c:	ea91 0f03 	teqne	r1, r3
 8000830:	bf02      	ittt	eq
 8000832:	ea90 0f02 	teqeq	r0, r2
 8000836:	2000      	moveq	r0, #0
 8000838:	4770      	bxeq	lr
 800083a:	f110 0f00 	cmn.w	r0, #0
 800083e:	ea91 0f03 	teq	r1, r3
 8000842:	bf58      	it	pl
 8000844:	4299      	cmppl	r1, r3
 8000846:	bf08      	it	eq
 8000848:	4290      	cmpeq	r0, r2
 800084a:	bf2c      	ite	cs
 800084c:	17d8      	asrcs	r0, r3, #31
 800084e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000852:	f040 0001 	orr.w	r0, r0, #1
 8000856:	4770      	bx	lr
 8000858:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d102      	bne.n	8000868 <__cmpdf2+0x64>
 8000862:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000866:	d107      	bne.n	8000878 <__cmpdf2+0x74>
 8000868:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800086c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000870:	d1d6      	bne.n	8000820 <__cmpdf2+0x1c>
 8000872:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000876:	d0d3      	beq.n	8000820 <__cmpdf2+0x1c>
 8000878:	f85d 0b04 	ldr.w	r0, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop

08000880 <__aeabi_cdrcmple>:
 8000880:	4684      	mov	ip, r0
 8000882:	4610      	mov	r0, r2
 8000884:	4662      	mov	r2, ip
 8000886:	468c      	mov	ip, r1
 8000888:	4619      	mov	r1, r3
 800088a:	4663      	mov	r3, ip
 800088c:	e000      	b.n	8000890 <__aeabi_cdcmpeq>
 800088e:	bf00      	nop

08000890 <__aeabi_cdcmpeq>:
 8000890:	b501      	push	{r0, lr}
 8000892:	f7ff ffb7 	bl	8000804 <__cmpdf2>
 8000896:	2800      	cmp	r0, #0
 8000898:	bf48      	it	mi
 800089a:	f110 0f00 	cmnmi.w	r0, #0
 800089e:	bd01      	pop	{r0, pc}

080008a0 <__aeabi_dcmpeq>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff fff4 	bl	8000890 <__aeabi_cdcmpeq>
 80008a8:	bf0c      	ite	eq
 80008aa:	2001      	moveq	r0, #1
 80008ac:	2000      	movne	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_dcmplt>:
 80008b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008b8:	f7ff ffea 	bl	8000890 <__aeabi_cdcmpeq>
 80008bc:	bf34      	ite	cc
 80008be:	2001      	movcc	r0, #1
 80008c0:	2000      	movcs	r0, #0
 80008c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008c6:	bf00      	nop

080008c8 <__aeabi_dcmple>:
 80008c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008cc:	f7ff ffe0 	bl	8000890 <__aeabi_cdcmpeq>
 80008d0:	bf94      	ite	ls
 80008d2:	2001      	movls	r0, #1
 80008d4:	2000      	movhi	r0, #0
 80008d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008da:	bf00      	nop

080008dc <__aeabi_dcmpge>:
 80008dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e0:	f7ff ffce 	bl	8000880 <__aeabi_cdrcmple>
 80008e4:	bf94      	ite	ls
 80008e6:	2001      	movls	r0, #1
 80008e8:	2000      	movhi	r0, #0
 80008ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ee:	bf00      	nop

080008f0 <__aeabi_dcmpgt>:
 80008f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008f4:	f7ff ffc4 	bl	8000880 <__aeabi_cdrcmple>
 80008f8:	bf34      	ite	cc
 80008fa:	2001      	movcc	r0, #1
 80008fc:	2000      	movcs	r0, #0
 80008fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000902:	bf00      	nop

08000904 <__aeabi_d2iz>:
 8000904:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000908:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800090c:	d215      	bcs.n	800093a <__aeabi_d2iz+0x36>
 800090e:	d511      	bpl.n	8000934 <__aeabi_d2iz+0x30>
 8000910:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000914:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000918:	d912      	bls.n	8000940 <__aeabi_d2iz+0x3c>
 800091a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800091e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000922:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000926:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800092a:	fa23 f002 	lsr.w	r0, r3, r2
 800092e:	bf18      	it	ne
 8000930:	4240      	negne	r0, r0
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d105      	bne.n	800094c <__aeabi_d2iz+0x48>
 8000940:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000944:	bf08      	it	eq
 8000946:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800094a:	4770      	bx	lr
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <__aeabi_d2uiz>:
 8000954:	004a      	lsls	r2, r1, #1
 8000956:	d211      	bcs.n	800097c <__aeabi_d2uiz+0x28>
 8000958:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800095c:	d211      	bcs.n	8000982 <__aeabi_d2uiz+0x2e>
 800095e:	d50d      	bpl.n	800097c <__aeabi_d2uiz+0x28>
 8000960:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000964:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000968:	d40e      	bmi.n	8000988 <__aeabi_d2uiz+0x34>
 800096a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800096e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000972:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000976:	fa23 f002 	lsr.w	r0, r3, r2
 800097a:	4770      	bx	lr
 800097c:	f04f 0000 	mov.w	r0, #0
 8000980:	4770      	bx	lr
 8000982:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000986:	d102      	bne.n	800098e <__aeabi_d2uiz+0x3a>
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	4770      	bx	lr
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	4770      	bx	lr

08000994 <__aeabi_frsub>:
 8000994:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000998:	e002      	b.n	80009a0 <__addsf3>
 800099a:	bf00      	nop

0800099c <__aeabi_fsub>:
 800099c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009a0 <__addsf3>:
 80009a0:	0042      	lsls	r2, r0, #1
 80009a2:	bf1f      	itttt	ne
 80009a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a8:	ea92 0f03 	teqne	r2, r3
 80009ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b4:	d06a      	beq.n	8000a8c <__addsf3+0xec>
 80009b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009be:	bfc1      	itttt	gt
 80009c0:	18d2      	addgt	r2, r2, r3
 80009c2:	4041      	eorgt	r1, r0
 80009c4:	4048      	eorgt	r0, r1
 80009c6:	4041      	eorgt	r1, r0
 80009c8:	bfb8      	it	lt
 80009ca:	425b      	neglt	r3, r3
 80009cc:	2b19      	cmp	r3, #25
 80009ce:	bf88      	it	hi
 80009d0:	4770      	bxhi	lr
 80009d2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009da:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009e6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009ea:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009ee:	bf18      	it	ne
 80009f0:	4249      	negne	r1, r1
 80009f2:	ea92 0f03 	teq	r2, r3
 80009f6:	d03f      	beq.n	8000a78 <__addsf3+0xd8>
 80009f8:	f1a2 0201 	sub.w	r2, r2, #1
 80009fc:	fa41 fc03 	asr.w	ip, r1, r3
 8000a00:	eb10 000c 	adds.w	r0, r0, ip
 8000a04:	f1c3 0320 	rsb	r3, r3, #32
 8000a08:	fa01 f103 	lsl.w	r1, r1, r3
 8000a0c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a10:	d502      	bpl.n	8000a18 <__addsf3+0x78>
 8000a12:	4249      	negs	r1, r1
 8000a14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a18:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a1c:	d313      	bcc.n	8000a46 <__addsf3+0xa6>
 8000a1e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a22:	d306      	bcc.n	8000a32 <__addsf3+0x92>
 8000a24:	0840      	lsrs	r0, r0, #1
 8000a26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a2a:	f102 0201 	add.w	r2, r2, #1
 8000a2e:	2afe      	cmp	r2, #254	@ 0xfe
 8000a30:	d251      	bcs.n	8000ad6 <__addsf3+0x136>
 8000a32:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3a:	bf08      	it	eq
 8000a3c:	f020 0001 	biceq.w	r0, r0, #1
 8000a40:	ea40 0003 	orr.w	r0, r0, r3
 8000a44:	4770      	bx	lr
 8000a46:	0049      	lsls	r1, r1, #1
 8000a48:	eb40 0000 	adc.w	r0, r0, r0
 8000a4c:	3a01      	subs	r2, #1
 8000a4e:	bf28      	it	cs
 8000a50:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a54:	d2ed      	bcs.n	8000a32 <__addsf3+0x92>
 8000a56:	fab0 fc80 	clz	ip, r0
 8000a5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a66:	bfaa      	itet	ge
 8000a68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a6c:	4252      	neglt	r2, r2
 8000a6e:	4318      	orrge	r0, r3
 8000a70:	bfbc      	itt	lt
 8000a72:	40d0      	lsrlt	r0, r2
 8000a74:	4318      	orrlt	r0, r3
 8000a76:	4770      	bx	lr
 8000a78:	f092 0f00 	teq	r2, #0
 8000a7c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a80:	bf06      	itte	eq
 8000a82:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a86:	3201      	addeq	r2, #1
 8000a88:	3b01      	subne	r3, #1
 8000a8a:	e7b5      	b.n	80009f8 <__addsf3+0x58>
 8000a8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a9a:	d021      	beq.n	8000ae0 <__addsf3+0x140>
 8000a9c:	ea92 0f03 	teq	r2, r3
 8000aa0:	d004      	beq.n	8000aac <__addsf3+0x10c>
 8000aa2:	f092 0f00 	teq	r2, #0
 8000aa6:	bf08      	it	eq
 8000aa8:	4608      	moveq	r0, r1
 8000aaa:	4770      	bx	lr
 8000aac:	ea90 0f01 	teq	r0, r1
 8000ab0:	bf1c      	itt	ne
 8000ab2:	2000      	movne	r0, #0
 8000ab4:	4770      	bxne	lr
 8000ab6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000aba:	d104      	bne.n	8000ac6 <__addsf3+0x126>
 8000abc:	0040      	lsls	r0, r0, #1
 8000abe:	bf28      	it	cs
 8000ac0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ac4:	4770      	bx	lr
 8000ac6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000aca:	bf3c      	itt	cc
 8000acc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ad0:	4770      	bxcc	lr
 8000ad2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ad6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ada:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ade:	4770      	bx	lr
 8000ae0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ae4:	bf16      	itet	ne
 8000ae6:	4608      	movne	r0, r1
 8000ae8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aec:	4601      	movne	r1, r0
 8000aee:	0242      	lsls	r2, r0, #9
 8000af0:	bf06      	itte	eq
 8000af2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000af6:	ea90 0f01 	teqeq	r0, r1
 8000afa:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_ui2f>:
 8000b00:	f04f 0300 	mov.w	r3, #0
 8000b04:	e004      	b.n	8000b10 <__aeabi_i2f+0x8>
 8000b06:	bf00      	nop

08000b08 <__aeabi_i2f>:
 8000b08:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b0c:	bf48      	it	mi
 8000b0e:	4240      	negmi	r0, r0
 8000b10:	ea5f 0c00 	movs.w	ip, r0
 8000b14:	bf08      	it	eq
 8000b16:	4770      	bxeq	lr
 8000b18:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b1c:	4601      	mov	r1, r0
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	e01c      	b.n	8000b5e <__aeabi_l2f+0x2a>

08000b24 <__aeabi_ul2f>:
 8000b24:	ea50 0201 	orrs.w	r2, r0, r1
 8000b28:	bf08      	it	eq
 8000b2a:	4770      	bxeq	lr
 8000b2c:	f04f 0300 	mov.w	r3, #0
 8000b30:	e00a      	b.n	8000b48 <__aeabi_l2f+0x14>
 8000b32:	bf00      	nop

08000b34 <__aeabi_l2f>:
 8000b34:	ea50 0201 	orrs.w	r2, r0, r1
 8000b38:	bf08      	it	eq
 8000b3a:	4770      	bxeq	lr
 8000b3c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b40:	d502      	bpl.n	8000b48 <__aeabi_l2f+0x14>
 8000b42:	4240      	negs	r0, r0
 8000b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b48:	ea5f 0c01 	movs.w	ip, r1
 8000b4c:	bf02      	ittt	eq
 8000b4e:	4684      	moveq	ip, r0
 8000b50:	4601      	moveq	r1, r0
 8000b52:	2000      	moveq	r0, #0
 8000b54:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b58:	bf08      	it	eq
 8000b5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b5e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b62:	fabc f28c 	clz	r2, ip
 8000b66:	3a08      	subs	r2, #8
 8000b68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b6c:	db10      	blt.n	8000b90 <__aeabi_l2f+0x5c>
 8000b6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b72:	4463      	add	r3, ip
 8000b74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b78:	f1c2 0220 	rsb	r2, r2, #32
 8000b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b80:	fa20 f202 	lsr.w	r2, r0, r2
 8000b84:	eb43 0002 	adc.w	r0, r3, r2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f102 0220 	add.w	r2, r2, #32
 8000b94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b98:	f1c2 0220 	rsb	r2, r2, #32
 8000b9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ba4:	eb43 0002 	adc.w	r0, r3, r2
 8000ba8:	bf08      	it	eq
 8000baa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bae:	4770      	bx	lr

08000bb0 <BlowOut3LED.1>:
    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */
    /* Initialize all configured peripherals */
    MX_GPIO_Init();
    /* USER CODE BEGIN 2 */
    void BlowOut3LED () {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	f8c7 c004 	str.w	ip, [r7, #4]
        HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 1);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2120      	movs	r1, #32
 8000bbe:	4808      	ldr	r0, [pc, #32]	@ (8000be0 <BlowOut3LED.1+0x30>)
 8000bc0:	f000 fe1d 	bl	80017fe <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 1);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <BlowOut3LED.1+0x30>)
 8000bca:	f000 fe18 	bl	80017fe <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, 1);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4803      	ldr	r0, [pc, #12]	@ (8000be0 <BlowOut3LED.1+0x30>)
 8000bd4:	f000 fe13 	bl	80017fe <HAL_GPIO_WritePin>
    }
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40010c00 	.word	0x40010c00

08000be4 <main>:
int main(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0a0      	sub	sp, #128	@ 0x80
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000bee:	64bb      	str	r3, [r7, #72]	@ 0x48
    int mode = 2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int modeTotal = 5;
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	667b      	str	r3, [r7, #100]	@ 0x64
    float dt =.001;
 8000bf8:	4bab      	ldr	r3, [pc, #684]	@ (8000ea8 <main+0x2c4>)
 8000bfa:	663b      	str	r3, [r7, #96]	@ 0x60
    float t = .0;
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	67bb      	str	r3, [r7, #120]	@ 0x78
    int tk = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	677b      	str	r3, [r7, #116]	@ 0x74
    int beepContinue = 100;
 8000c06:	2364      	movs	r3, #100	@ 0x64
 8000c08:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int beepCurrent = beepContinue;
 8000c0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c0c:	673b      	str	r3, [r7, #112]	@ 0x70
    int sosA = 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_Init();
 8000c12:	f000 fadf 	bl	80011d4 <HAL_Init>
    SystemClock_Config();
 8000c16:	f000 f97d 	bl	8000f14 <SystemClock_Config>
    MX_GPIO_Init();
 8000c1a:	f000 f9c1 	bl	8000fa0 <MX_GPIO_Init>
                HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 1);
            }
        }
    }

    int SOS_s = 3000;
 8000c1e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000c22:	65bb      	str	r3, [r7, #88]	@ 0x58
    int SOS_l = 1000;
 8000c24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c28:	657b      	str	r3, [r7, #84]	@ 0x54

    int SOS_data[] = {
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	2302      	movs	r3, #2
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c34:	60fb      	str	r3, [r7, #12]
            1,
            2, // 亮
            SOS_s*1,
            SOS_s*2,
 8000c36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c38:	005b      	lsls	r3, r3, #1
    int SOS_data[] = {
 8000c3a:	613b      	str	r3, [r7, #16]
            SOS_s*3,
 8000c3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
    int SOS_data[] = {
 8000c44:	617b      	str	r3, [r7, #20]
            SOS_s*4,
 8000c46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c48:	009b      	lsls	r3, r3, #2
    int SOS_data[] = {
 8000c4a:	61bb      	str	r3, [r7, #24]
            SOS_s*5,
 8000c4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000c4e:	4613      	mov	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	4413      	add	r3, r2
    int SOS_data[] = {
 8000c54:	61fb      	str	r3, [r7, #28]
            SOS_s*5+SOS_l*1,
 8000c56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000c58:	4613      	mov	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	441a      	add	r2, r3
 8000c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c60:	4413      	add	r3, r2
    int SOS_data[] = {
 8000c62:	623b      	str	r3, [r7, #32]
            SOS_s*5+SOS_l*2,
 8000c64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000c66:	4613      	mov	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	441a      	add	r2, r3
 8000c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
    int SOS_data[] = {
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
            SOS_s*5+SOS_l*3,
 8000c74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000c76:	4613      	mov	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	1899      	adds	r1, r3, r2
 8000c7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000c7e:	4613      	mov	r3, r2
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	4413      	add	r3, r2
 8000c84:	440b      	add	r3, r1
    int SOS_data[] = {
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
            SOS_s*5+SOS_l*4,
 8000c88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	441a      	add	r2, r3
 8000c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
    int SOS_data[] = {
 8000c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
            SOS_s*5+SOS_l*5,
 8000c98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c9c:	441a      	add	r2, r3
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
    int SOS_data[] = {
 8000ca4:	633b      	str	r3, [r7, #48]	@ 0x30
            SOS_s*5+SOS_l*5+SOS_s*1,
 8000ca6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000caa:	441a      	add	r2, r3
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	441a      	add	r2, r3
 8000cb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000cb4:	4413      	add	r3, r2
    int SOS_data[] = {
 8000cb6:	637b      	str	r3, [r7, #52]	@ 0x34
            SOS_s*5+SOS_l*5+SOS_s*2,
 8000cb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cbc:	441a      	add	r2, r3
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	441a      	add	r2, r3
 8000cc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
    int SOS_data[] = {
 8000cca:	63bb      	str	r3, [r7, #56]	@ 0x38
            SOS_s*5+SOS_l*5+SOS_s*3,
 8000ccc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cd0:	441a      	add	r2, r3
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	1899      	adds	r1, r3, r2
 8000cd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000cda:	4613      	mov	r3, r2
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	4413      	add	r3, r2
 8000ce0:	440b      	add	r3, r1
    int SOS_data[] = {
 8000ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            SOS_s*5+SOS_l*5+SOS_s*4,
 8000ce4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ce8:	441a      	add	r2, r3
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	441a      	add	r2, r3
 8000cf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
    int SOS_data[] = {
 8000cf6:	643b      	str	r3, [r7, #64]	@ 0x40
            SOS_s*5+SOS_l*5+SOS_s*5
 8000cf8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cfc:	441a      	add	r2, r3
 8000cfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d00:	441a      	add	r2, r3
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
    int SOS_data[] = {
 8000d08:	647b      	str	r3, [r7, #68]	@ 0x44
    /* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */

        // 处理按键
        HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin);
 8000d0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d0e:	4867      	ldr	r0, [pc, #412]	@ (8000eac <main+0x2c8>)
 8000d10:	f000 fd5e 	bl	80017d0 <HAL_GPIO_ReadPin>
        if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)==1) {
 8000d14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d18:	4864      	ldr	r0, [pc, #400]	@ (8000eac <main+0x2c8>)
 8000d1a:	f000 fd59 	bl	80017d0 <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d127      	bne.n	8000d74 <main+0x190>
            if (mode == modeTotal) { mode = 1; } else { mode+=1; }
 8000d24:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d102      	bne.n	8000d32 <main+0x14e>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000d30:	e002      	b.n	8000d38 <main+0x154>
 8000d32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000d34:	3301      	adds	r3, #1
 8000d36:	67fb      	str	r3, [r7, #124]	@ 0x7c
            beepCurrent = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	673b      	str	r3, [r7, #112]	@ 0x70
            HAL_Delay(dt*1e3);
 8000d3c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000d3e:	f7ff fd01 	bl	8000744 <__aeabi_f2d>
 8000d42:	f04f 0200 	mov.w	r2, #0
 8000d46:	4b5a      	ldr	r3, [pc, #360]	@ (8000eb0 <main+0x2cc>)
 8000d48:	f7ff fa6e 	bl	8000228 <__aeabi_dmul>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4610      	mov	r0, r2
 8000d52:	4619      	mov	r1, r3
 8000d54:	f7ff fdfe 	bl	8000954 <__aeabi_d2uiz>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fa9c 	bl	8001298 <HAL_Delay>
            while (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)==1) {}
 8000d60:	bf00      	nop
 8000d62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d66:	4851      	ldr	r0, [pc, #324]	@ (8000eac <main+0x2c8>)
 8000d68:	f000 fd32 	bl	80017d0 <HAL_GPIO_ReadPin>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d0f7      	beq.n	8000d62 <main+0x17e>
 8000d72:	e011      	b.n	8000d98 <main+0x1b4>
        } else {
            HAL_Delay(dt*1e3);
 8000d74:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000d76:	f7ff fce5 	bl	8000744 <__aeabi_f2d>
 8000d7a:	f04f 0200 	mov.w	r2, #0
 8000d7e:	4b4c      	ldr	r3, [pc, #304]	@ (8000eb0 <main+0x2cc>)
 8000d80:	f7ff fa52 	bl	8000228 <__aeabi_dmul>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	4610      	mov	r0, r2
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f7ff fde2 	bl	8000954 <__aeabi_d2uiz>
 8000d90:	4603      	mov	r3, r0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fa80 	bl	8001298 <HAL_Delay>
        }

        // 蜂鸣器
        if (beepCurrent < beepContinue) {
 8000d98:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	da09      	bge.n	8000db4 <main+0x1d0>
            HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, 1);
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000da6:	4843      	ldr	r0, [pc, #268]	@ (8000eb4 <main+0x2d0>)
 8000da8:	f000 fd29 	bl	80017fe <HAL_GPIO_WritePin>
            beepCurrent +=1;
 8000dac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000dae:	3301      	adds	r3, #1
 8000db0:	673b      	str	r3, [r7, #112]	@ 0x70
 8000db2:	e005      	b.n	8000dc0 <main+0x1dc>
        } else {
            HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dba:	483e      	ldr	r0, [pc, #248]	@ (8000eb4 <main+0x2d0>)
 8000dbc:	f000 fd1f 	bl	80017fe <HAL_GPIO_WritePin>
        }

        // 模式处理
        if (mode==1) {
 8000dc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d066      	beq.n	8000e94 <main+0x2b0>
           // HappyParty(200);
        } else if (mode == 2) {
 8000dc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d063      	beq.n	8000e94 <main+0x2b0>
           // HappyParty(500);
        } else if (mode == 3) {
 8000dcc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d12b      	bne.n	8000e2a <main+0x246>
            int length = sizeof(SOS_data) / sizeof(SOS_data[0]);
 8000dd2:	2311      	movs	r3, #17
 8000dd4:	653b      	str	r3, [r7, #80]	@ 0x50
            for (int i = 0; i < length; i++) {
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000dda:	e017      	b.n	8000e0c <main+0x228>
              int item = SOS_data[i];
 8000ddc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	3380      	adds	r3, #128	@ 0x80
 8000de2:	443b      	add	r3, r7
 8000de4:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8000de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
              if (abs(item - tk)<1e-8) {
 8000dea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000dec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db08      	blt.n	8000e06 <main+0x222>
 8000df4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	dc03      	bgt.n	8000e06 <main+0x222>
                  sosA = 1 - sosA;
 8000dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e00:	f1c3 0301 	rsb	r3, r3, #1
 8000e04:	66fb      	str	r3, [r7, #108]	@ 0x6c
            for (int i = 0; i < length; i++) {
 8000e06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e08:	3301      	adds	r3, #1
 8000e0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000e0c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000e0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dbe3      	blt.n	8000ddc <main+0x1f8>
              }
            }
            HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 1 - sosA);
 8000e14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f1c3 0301 	rsb	r3, r3, #1
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	461a      	mov	r2, r3
 8000e20:	2120      	movs	r1, #32
 8000e22:	4825      	ldr	r0, [pc, #148]	@ (8000eb8 <main+0x2d4>)
 8000e24:	f000 fceb 	bl	80017fe <HAL_GPIO_WritePin>
 8000e28:	e034      	b.n	8000e94 <main+0x2b0>
           // BlowOut3LED();
          //  SOS();
        } else if (mode == 4) {
 8000e2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d129      	bne.n	8000e84 <main+0x2a0>
            RHeart(50 + 48 * sin(5.0 * t));
 8000e30:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000e32:	f7ff fc87 	bl	8000744 <__aeabi_f2d>
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <main+0x2d8>)
 8000e3c:	f7ff f9f4 	bl	8000228 <__aeabi_dmul>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	f001 f8fc 	bl	8002044 <sin>
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <main+0x2dc>)
 8000e52:	f7ff f9e9 	bl	8000228 <__aeabi_dmul>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <main+0x2e0>)
 8000e64:	f7ff fb10 	bl	8000488 <__adddf3>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f7ff fd48 	bl	8000904 <__aeabi_d2iz>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	f000 f823 	bl	8000ec8 <RHeart.0>
 8000e82:	e007      	b.n	8000e94 <main+0x2b0>
        } else if (mode == 5) {
 8000e84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e86:	2b05      	cmp	r3, #5
 8000e88:	d104      	bne.n	8000e94 <main+0x2b0>
            BlowOut3LED();
 8000e8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e8e:	469c      	mov	ip, r3
 8000e90:	f7ff fe8e 	bl	8000bb0 <BlowOut3LED.1>
        }

        // 环境时间
        t += dt;
 8000e94:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000e96:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000e98:	f7ff fd82 	bl	80009a0 <__addsf3>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	67bb      	str	r3, [r7, #120]	@ 0x78
        tk += 1;
 8000ea0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	677b      	str	r3, [r7, #116]	@ 0x74
        HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin);
 8000ea6:	e730      	b.n	8000d0a <main+0x126>
 8000ea8:	3a83126f 	.word	0x3a83126f
 8000eac:	40011000 	.word	0x40011000
 8000eb0:	408f4000 	.word	0x408f4000
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	40010c00 	.word	0x40010c00
 8000ebc:	40140000 	.word	0x40140000
 8000ec0:	40480000 	.word	0x40480000
 8000ec4:	40490000 	.word	0x40490000

08000ec8 <RHeart.0>:
    void RHeart(int lt) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	f8c7 c000 	str.w	ip, [r7]
        for (int i = 0; i<100; i++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	e011      	b.n	8000efe <RHeart.0+0x36>
            if (i < lt) {
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	da05      	bge.n	8000eee <RHeart.0+0x26>
                HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2120      	movs	r1, #32
 8000ee6:	480a      	ldr	r0, [pc, #40]	@ (8000f10 <RHeart.0+0x48>)
 8000ee8:	f000 fc89 	bl	80017fe <HAL_GPIO_WritePin>
 8000eec:	e004      	b.n	8000ef8 <RHeart.0+0x30>
                HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 1);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2120      	movs	r1, #32
 8000ef2:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <RHeart.0+0x48>)
 8000ef4:	f000 fc83 	bl	80017fe <HAL_GPIO_WritePin>
        for (int i = 0; i<100; i++) {
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	3301      	adds	r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2b63      	cmp	r3, #99	@ 0x63
 8000f02:	ddea      	ble.n	8000eda <RHeart.0+0x12>
    }
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40010c00 	.word	0x40010c00

08000f14 <SystemClock_Config>:
}
/**
  • @brief System Clock Configuration
  • @retval None
  */
void SystemClock_Config(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b090      	sub	sp, #64	@ 0x40
 8000f18:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {
 8000f1a:	f107 0318 	add.w	r3, r7, #24
 8000f1e:	2228      	movs	r2, #40	@ 0x28
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 f862 	bl	8001fec <memset>
            0
    }
    ;
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
    }
    ;
    /** Initializes the RCC Oscillators according to the specified parameters
  • in the RCC_OscInitTypeDef structure.
  */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f36:	2301      	movs	r3, #1
 8000f38:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f3e:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f44:	2301      	movs	r3, #1
 8000f46:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f50:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f52:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fc67 	bl	8001830 <HAL_RCC_OscConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0x58>
        Error_Handler();
 8000f68:	f000 f8a4 	bl	80010b4 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
  */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	607b      	str	r3, [r7, #4]
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f70:	2302      	movs	r3, #2
 8000f72:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f7c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2102      	movs	r1, #2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fed4 	bl	8001d34 <HAL_RCC_ClockConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0x82>
        Error_Handler();
 8000f92:	f000 f88f 	bl	80010b4 <Error_Handler>
    }
}
 8000f96:	bf00      	nop
 8000f98:	3740      	adds	r7, #64	@ 0x40
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <MX_GPIO_Init>:
/**
  • @brief GPIO Initialization Function
  • @param None
  • @retval None
  */
static void MX_GPIO_Init(void) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
    }
    ;
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80010a4 <MX_GPIO_Init+0x104>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a3a      	ldr	r2, [pc, #232]	@ (80010a4 <MX_GPIO_Init+0x104>)
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b38      	ldr	r3, [pc, #224]	@ (80010a4 <MX_GPIO_Init+0x104>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0310 	and.w	r3, r3, #16
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b35      	ldr	r3, [pc, #212]	@ (80010a4 <MX_GPIO_Init+0x104>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a34      	ldr	r2, [pc, #208]	@ (80010a4 <MX_GPIO_Init+0x104>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b32      	ldr	r3, [pc, #200]	@ (80010a4 <MX_GPIO_Init+0x104>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80010a4 <MX_GPIO_Init+0x104>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a2e      	ldr	r2, [pc, #184]	@ (80010a4 <MX_GPIO_Init+0x104>)
 8000fea:	f043 0308 	orr.w	r3, r3, #8
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80010a4 <MX_GPIO_Init+0x104>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED_G_Pin|LED_B_Pin|LED_R_Pin, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2123      	movs	r1, #35	@ 0x23
 8001000:	4829      	ldr	r0, [pc, #164]	@ (80010a8 <MX_GPIO_Init+0x108>)
 8001002:	f000 fbfc 	bl	80017fe <HAL_GPIO_WritePin>
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800100c:	4827      	ldr	r0, [pc, #156]	@ (80010ac <MX_GPIO_Init+0x10c>)
 800100e:	f000 fbf6 	bl	80017fe <HAL_GPIO_WritePin>
    /*Configure GPIO pin : KEY_2_Pin */
    GPIO_InitStruct.Pin = KEY_2_Pin;
 8001012:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	4822      	ldr	r0, [pc, #136]	@ (80010b0 <MX_GPIO_Init+0x110>)
 8001028:	f000 fa3e 	bl	80014a8 <HAL_GPIO_Init>
    /*Configure GPIO pin : KEY_1_Pin */
    GPIO_InitStruct.Pin = KEY_1_Pin;
 800102c:	2301      	movs	r3, #1
 800102e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	4619      	mov	r1, r3
 800103e:	481b      	ldr	r0, [pc, #108]	@ (80010ac <MX_GPIO_Init+0x10c>)
 8001040:	f000 fa32 	bl	80014a8 <HAL_GPIO_Init>
    /*Configure GPIO pins : LED_G_Pin LED_B_Pin */
    GPIO_InitStruct.Pin = LED_G_Pin|LED_B_Pin;
 8001044:	2303      	movs	r3, #3
 8001046:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104c:	2301      	movs	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	4619      	mov	r1, r3
 800105a:	4813      	ldr	r0, [pc, #76]	@ (80010a8 <MX_GPIO_Init+0x108>)
 800105c:	f000 fa24 	bl	80014a8 <HAL_GPIO_Init>
    /*Configure GPIO pin : BEEP_Pin */
    GPIO_InitStruct.Pin = BEEP_Pin;
 8001060:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001064:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2302      	movs	r3, #2
 8001070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	4619      	mov	r1, r3
 8001078:	480c      	ldr	r0, [pc, #48]	@ (80010ac <MX_GPIO_Init+0x10c>)
 800107a:	f000 fa15 	bl	80014a8 <HAL_GPIO_Init>
    /*Configure GPIO pin : LED_R_Pin */
    GPIO_InitStruct.Pin = LED_R_Pin;
 800107e:	2320      	movs	r3, #32
 8001080:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001086:	2302      	movs	r3, #2
 8001088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	4619      	mov	r1, r3
 8001094:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <MX_GPIO_Init+0x108>)
 8001096:	f000 fa07 	bl	80014a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40010c00 	.word	0x40010c00
 80010ac:	40010800 	.word	0x40010800
 80010b0:	40011000 	.word	0x40011000

080010b4 <Error_Handler>:
/* USER CODE END 4 */
/**
  • @brief  This function is executed in case of error occurrence.
  • @retval None
  */
void Error_Handler(void) {
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <Error_Handler+0x8>

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <HAL_MspInit+0x5c>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	4a14      	ldr	r2, [pc, #80]	@ (800111c <HAL_MspInit+0x5c>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6193      	str	r3, [r2, #24]
 80010d2:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_MspInit+0x5c>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <HAL_MspInit+0x5c>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4a0e      	ldr	r2, [pc, #56]	@ (800111c <HAL_MspInit+0x5c>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e8:	61d3      	str	r3, [r2, #28]
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <HAL_MspInit+0x5c>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <HAL_MspInit+0x60>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HAL_MspInit+0x60>)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	40021000 	.word	0x40021000
 8001120:	40010000 	.word	0x40010000

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <NMI_Handler+0x4>

0800112c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <HardFault_Handler+0x4>

08001134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <MemManage_Handler+0x4>

0800113c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <BusFault_Handler+0x4>

08001144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <UsageFault_Handler+0x4>

0800114c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001174:	f000 f874 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001188:	f7ff fff8 	bl	800117c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	480b      	ldr	r0, [pc, #44]	@ (80011bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800118e:	490c      	ldr	r1, [pc, #48]	@ (80011c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001190:	4a0c      	ldr	r2, [pc, #48]	@ (80011c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a09      	ldr	r2, [pc, #36]	@ (80011c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011a4:	4c09      	ldr	r4, [pc, #36]	@ (80011cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b2:	f000 ff23 	bl	8001ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011b6:	f7ff fd15 	bl	8000be4 <main>
  bx lr
 80011ba:	4770      	bx	lr
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011c4:	08003200 	.word	0x08003200
  ldr r2, =_sbss
 80011c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011cc:	2000002c 	.word	0x2000002c

080011d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC1_2_IRQHandler>
	...

080011d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <HAL_Init+0x28>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <HAL_Init+0x28>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f92b 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ea:	200f      	movs	r0, #15
 80011ec:	f000 f808 	bl	8001200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f0:	f7ff ff66 	bl	80010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40022000 	.word	0x40022000

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <HAL_InitTick+0x54>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_InitTick+0x58>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f935 	bl	800148e <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00e      	b.n	800124c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d80a      	bhi.n	800124a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f000 f90b 	bl	8001456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4a06      	ldr	r2, [pc, #24]	@ (800125c <HAL_InitTick+0x5c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000000 	.word	0x20000000
 8001258:	20000008 	.word	0x20000008
 800125c:	20000004 	.word	0x20000004

08001260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <HAL_IncTick+0x1c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <HAL_IncTick+0x20>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a03      	ldr	r2, [pc, #12]	@ (8001280 <HAL_IncTick+0x20>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	20000008 	.word	0x20000008
 8001280:	20000028 	.word	0x20000028

08001284 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b02      	ldr	r3, [pc, #8]	@ (8001294 <HAL_GetTick+0x10>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	20000028 	.word	0x20000028

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff fff0 	bl	8001284 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_Delay+0x44>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffe0 	bl	8001284 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000008 	.word	0x20000008

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	@ (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	@ (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	@ 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	@ 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800140c:	d301      	bcc.n	8001412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140e:	2301      	movs	r3, #1
 8001410:	e00f      	b.n	8001432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <SysTick_Config+0x40>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141a:	210f      	movs	r1, #15
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f7ff ff90 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <SysTick_Config+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	@ (800143c <SysTick_Config+0x40>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff49 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff5e 	bl	8001328 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff90 	bl	8001398 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5f 	bl	8001344 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffb0 	bl	80013fc <SysTick_Config>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b08b      	sub	sp, #44	@ 0x2c
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ba:	e179      	b.n	80017b0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014bc:	2201      	movs	r2, #1
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	f040 8168 	bne.w	80017aa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4a96      	ldr	r2, [pc, #600]	@ (8001738 <HAL_GPIO_Init+0x290>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d05e      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
 80014e4:	4a94      	ldr	r2, [pc, #592]	@ (8001738 <HAL_GPIO_Init+0x290>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d875      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 80014ea:	4a94      	ldr	r2, [pc, #592]	@ (800173c <HAL_GPIO_Init+0x294>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d058      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
 80014f0:	4a92      	ldr	r2, [pc, #584]	@ (800173c <HAL_GPIO_Init+0x294>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d86f      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 80014f6:	4a92      	ldr	r2, [pc, #584]	@ (8001740 <HAL_GPIO_Init+0x298>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d052      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
 80014fc:	4a90      	ldr	r2, [pc, #576]	@ (8001740 <HAL_GPIO_Init+0x298>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d869      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 8001502:	4a90      	ldr	r2, [pc, #576]	@ (8001744 <HAL_GPIO_Init+0x29c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d04c      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
 8001508:	4a8e      	ldr	r2, [pc, #568]	@ (8001744 <HAL_GPIO_Init+0x29c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d863      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 800150e:	4a8e      	ldr	r2, [pc, #568]	@ (8001748 <HAL_GPIO_Init+0x2a0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d046      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
 8001514:	4a8c      	ldr	r2, [pc, #560]	@ (8001748 <HAL_GPIO_Init+0x2a0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d85d      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 800151a:	2b12      	cmp	r3, #18
 800151c:	d82a      	bhi.n	8001574 <HAL_GPIO_Init+0xcc>
 800151e:	2b12      	cmp	r3, #18
 8001520:	d859      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 8001522:	a201      	add	r2, pc, #4	@ (adr r2, 8001528 <HAL_GPIO_Init+0x80>)
 8001524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001528:	080015a3 	.word	0x080015a3
 800152c:	0800157d 	.word	0x0800157d
 8001530:	0800158f 	.word	0x0800158f
 8001534:	080015d1 	.word	0x080015d1
 8001538:	080015d7 	.word	0x080015d7
 800153c:	080015d7 	.word	0x080015d7
 8001540:	080015d7 	.word	0x080015d7
 8001544:	080015d7 	.word	0x080015d7
 8001548:	080015d7 	.word	0x080015d7
 800154c:	080015d7 	.word	0x080015d7
 8001550:	080015d7 	.word	0x080015d7
 8001554:	080015d7 	.word	0x080015d7
 8001558:	080015d7 	.word	0x080015d7
 800155c:	080015d7 	.word	0x080015d7
 8001560:	080015d7 	.word	0x080015d7
 8001564:	080015d7 	.word	0x080015d7
 8001568:	080015d7 	.word	0x080015d7
 800156c:	08001585 	.word	0x08001585
 8001570:	08001599 	.word	0x08001599
 8001574:	4a75      	ldr	r2, [pc, #468]	@ (800174c <HAL_GPIO_Init+0x2a4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800157a:	e02c      	b.n	80015d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	623b      	str	r3, [r7, #32]
          break;
 8001582:	e029      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	3304      	adds	r3, #4
 800158a:	623b      	str	r3, [r7, #32]
          break;
 800158c:	e024      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	3308      	adds	r3, #8
 8001594:	623b      	str	r3, [r7, #32]
          break;
 8001596:	e01f      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	330c      	adds	r3, #12
 800159e:	623b      	str	r3, [r7, #32]
          break;
 80015a0:	e01a      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015aa:	2304      	movs	r3, #4
 80015ac:	623b      	str	r3, [r7, #32]
          break;
 80015ae:	e013      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d105      	bne.n	80015c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b8:	2308      	movs	r3, #8
 80015ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	611a      	str	r2, [r3, #16]
          break;
 80015c2:	e009      	b.n	80015d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c4:	2308      	movs	r3, #8
 80015c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	615a      	str	r2, [r3, #20]
          break;
 80015ce:	e003      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
          break;
 80015d4:	e000      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          break;
 80015d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2bff      	cmp	r3, #255	@ 0xff
 80015dc:	d801      	bhi.n	80015e2 <HAL_GPIO_Init+0x13a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	e001      	b.n	80015e6 <HAL_GPIO_Init+0x13e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3304      	adds	r3, #4
 80015e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2bff      	cmp	r3, #255	@ 0xff
 80015ec:	d802      	bhi.n	80015f4 <HAL_GPIO_Init+0x14c>
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	e002      	b.n	80015fa <HAL_GPIO_Init+0x152>
 80015f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f6:	3b08      	subs	r3, #8
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	210f      	movs	r1, #15
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	401a      	ands	r2, r3
 800160c:	6a39      	ldr	r1, [r7, #32]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	431a      	orrs	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 80c1 	beq.w	80017aa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001628:	4b49      	ldr	r3, [pc, #292]	@ (8001750 <HAL_GPIO_Init+0x2a8>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a48      	ldr	r2, [pc, #288]	@ (8001750 <HAL_GPIO_Init+0x2a8>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b46      	ldr	r3, [pc, #280]	@ (8001750 <HAL_GPIO_Init+0x2a8>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001640:	4a44      	ldr	r2, [pc, #272]	@ (8001754 <HAL_GPIO_Init+0x2ac>)
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	220f      	movs	r2, #15
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4013      	ands	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a3c      	ldr	r2, [pc, #240]	@ (8001758 <HAL_GPIO_Init+0x2b0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d01f      	beq.n	80016ac <HAL_GPIO_Init+0x204>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a3b      	ldr	r2, [pc, #236]	@ (800175c <HAL_GPIO_Init+0x2b4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d019      	beq.n	80016a8 <HAL_GPIO_Init+0x200>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a3a      	ldr	r2, [pc, #232]	@ (8001760 <HAL_GPIO_Init+0x2b8>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d013      	beq.n	80016a4 <HAL_GPIO_Init+0x1fc>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a39      	ldr	r2, [pc, #228]	@ (8001764 <HAL_GPIO_Init+0x2bc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d00d      	beq.n	80016a0 <HAL_GPIO_Init+0x1f8>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a38      	ldr	r2, [pc, #224]	@ (8001768 <HAL_GPIO_Init+0x2c0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d007      	beq.n	800169c <HAL_GPIO_Init+0x1f4>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a37      	ldr	r2, [pc, #220]	@ (800176c <HAL_GPIO_Init+0x2c4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d101      	bne.n	8001698 <HAL_GPIO_Init+0x1f0>
 8001694:	2305      	movs	r3, #5
 8001696:	e00a      	b.n	80016ae <HAL_GPIO_Init+0x206>
 8001698:	2306      	movs	r3, #6
 800169a:	e008      	b.n	80016ae <HAL_GPIO_Init+0x206>
 800169c:	2304      	movs	r3, #4
 800169e:	e006      	b.n	80016ae <HAL_GPIO_Init+0x206>
 80016a0:	2303      	movs	r3, #3
 80016a2:	e004      	b.n	80016ae <HAL_GPIO_Init+0x206>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e002      	b.n	80016ae <HAL_GPIO_Init+0x206>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_GPIO_Init+0x206>
 80016ac:	2300      	movs	r3, #0
 80016ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016b0:	f002 0203 	and.w	r2, r2, #3
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	4093      	lsls	r3, r2
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016be:	4925      	ldr	r1, [pc, #148]	@ (8001754 <HAL_GPIO_Init+0x2ac>)
 80016c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	3302      	adds	r3, #2
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016d8:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <HAL_GPIO_Init+0x2c8>)
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	4924      	ldr	r1, [pc, #144]	@ (8001770 <HAL_GPIO_Init+0x2c8>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016e6:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <HAL_GPIO_Init+0x2c8>)
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4920      	ldr	r1, [pc, #128]	@ (8001770 <HAL_GPIO_Init+0x2c8>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001700:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <HAL_GPIO_Init+0x2c8>)
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	491a      	ldr	r1, [pc, #104]	@ (8001770 <HAL_GPIO_Init+0x2c8>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	60cb      	str	r3, [r1, #12]
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800170e:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <HAL_GPIO_Init+0x2c8>)
 8001710:	68da      	ldr	r2, [r3, #12]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	4916      	ldr	r1, [pc, #88]	@ (8001770 <HAL_GPIO_Init+0x2c8>)
 8001718:	4013      	ands	r3, r2
 800171a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d025      	beq.n	8001774 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001728:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <HAL_GPIO_Init+0x2c8>)
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4910      	ldr	r1, [pc, #64]	@ (8001770 <HAL_GPIO_Init+0x2c8>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
 8001734:	e025      	b.n	8001782 <HAL_GPIO_Init+0x2da>
 8001736:	bf00      	nop
 8001738:	10320000 	.word	0x10320000
 800173c:	10310000 	.word	0x10310000
 8001740:	10220000 	.word	0x10220000
 8001744:	10210000 	.word	0x10210000
 8001748:	10120000 	.word	0x10120000
 800174c:	10110000 	.word	0x10110000
 8001750:	40021000 	.word	0x40021000
 8001754:	40010000 	.word	0x40010000
 8001758:	40010800 	.word	0x40010800
 800175c:	40010c00 	.word	0x40010c00
 8001760:	40011000 	.word	0x40011000
 8001764:	40011400 	.word	0x40011400
 8001768:	40011800 	.word	0x40011800
 800176c:	40011c00 	.word	0x40011c00
 8001770:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001774:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <HAL_GPIO_Init+0x324>)
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	43db      	mvns	r3, r3
 800177c:	4913      	ldr	r1, [pc, #76]	@ (80017cc <HAL_GPIO_Init+0x324>)
 800177e:	4013      	ands	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d006      	beq.n	800179c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800178e:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <HAL_GPIO_Init+0x324>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	490e      	ldr	r1, [pc, #56]	@ (80017cc <HAL_GPIO_Init+0x324>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
 800179a:	e006      	b.n	80017aa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800179c:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <HAL_GPIO_Init+0x324>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	4909      	ldr	r1, [pc, #36]	@ (80017cc <HAL_GPIO_Init+0x324>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	3301      	adds	r3, #1
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f47f ae7e 	bne.w	80014bc <HAL_GPIO_Init+0x14>
  }
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	372c      	adds	r7, #44	@ 0x2c
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	40010400 	.word	0x40010400

080017d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e001      	b.n	80017f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	460b      	mov	r3, r1
 8001808:	807b      	strh	r3, [r7, #2]
 800180a:	4613      	mov	r3, r2
 800180c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800180e:	787b      	ldrb	r3, [r7, #1]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001814:	887a      	ldrh	r2, [r7, #2]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800181a:	e003      	b.n	8001824 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800181c:	887b      	ldrh	r3, [r7, #2]
 800181e:	041a      	lsls	r2, r3, #16
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	611a      	str	r2, [r3, #16]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
	...

08001830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e272      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8087 	beq.w	800195e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001850:	4b92      	ldr	r3, [pc, #584]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b04      	cmp	r3, #4
 800185a:	d00c      	beq.n	8001876 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800185c:	4b8f      	ldr	r3, [pc, #572]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b08      	cmp	r3, #8
 8001866:	d112      	bne.n	800188e <HAL_RCC_OscConfig+0x5e>
 8001868:	4b8c      	ldr	r3, [pc, #560]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001874:	d10b      	bne.n	800188e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001876:	4b89      	ldr	r3, [pc, #548]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d06c      	beq.n	800195c <HAL_RCC_OscConfig+0x12c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d168      	bne.n	800195c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e24c      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001896:	d106      	bne.n	80018a6 <HAL_RCC_OscConfig+0x76>
 8001898:	4b80      	ldr	r3, [pc, #512]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a7f      	ldr	r2, [pc, #508]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 800189e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e02e      	b.n	8001904 <HAL_RCC_OscConfig+0xd4>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x98>
 80018ae:	4b7b      	ldr	r3, [pc, #492]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7a      	ldr	r2, [pc, #488]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b78      	ldr	r3, [pc, #480]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a77      	ldr	r2, [pc, #476]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e01d      	b.n	8001904 <HAL_RCC_OscConfig+0xd4>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0xbc>
 80018d2:	4b72      	ldr	r3, [pc, #456]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a71      	ldr	r2, [pc, #452]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b6f      	ldr	r3, [pc, #444]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a6e      	ldr	r2, [pc, #440]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0xd4>
 80018ec:	4b6b      	ldr	r3, [pc, #428]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a6a      	ldr	r2, [pc, #424]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b68      	ldr	r3, [pc, #416]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a67      	ldr	r2, [pc, #412]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001902:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d013      	beq.n	8001934 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fcba 	bl	8001284 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff fcb6 	bl	8001284 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	@ 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e200      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b5d      	ldr	r3, [pc, #372]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0xe4>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fca6 	bl	8001284 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fca2 	bl	8001284 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	@ 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e1ec      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	4b53      	ldr	r3, [pc, #332]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x10c>
 800195a:	e000      	b.n	800195e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d063      	beq.n	8001a32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800196a:	4b4c      	ldr	r3, [pc, #304]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001976:	4b49      	ldr	r3, [pc, #292]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b08      	cmp	r3, #8
 8001980:	d11c      	bne.n	80019bc <HAL_RCC_OscConfig+0x18c>
 8001982:	4b46      	ldr	r3, [pc, #280]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d116      	bne.n	80019bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	4b43      	ldr	r3, [pc, #268]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <HAL_RCC_OscConfig+0x176>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d001      	beq.n	80019a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e1c0      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a6:	4b3d      	ldr	r3, [pc, #244]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4939      	ldr	r1, [pc, #228]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	e03a      	b.n	8001a32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c4:	4b36      	ldr	r3, [pc, #216]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff fc5b 	bl	8001284 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff fc57 	bl	8001284 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e1a1      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4927      	ldr	r1, [pc, #156]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
 8001a04:	e015      	b.n	8001a32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a06:	4b26      	ldr	r3, [pc, #152]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fc3a 	bl	8001284 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff fc36 	bl	8001284 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e180      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	4b1d      	ldr	r3, [pc, #116]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d03a      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d019      	beq.n	8001a7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a46:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fc1a 	bl	8001284 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff fc16 	bl	8001284 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e160      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	4b0d      	ldr	r3, [pc, #52]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a72:	2001      	movs	r0, #1
 8001a74:	f000 fa9c 	bl	8001fb0 <RCC_Delay>
 8001a78:	e01c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a80:	f7ff fc00 	bl	8001284 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a86:	e00f      	b.n	8001aa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff fbfc 	bl	8001284 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d908      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e146      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	42420000 	.word	0x42420000
 8001aa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa8:	4b92      	ldr	r3, [pc, #584]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1e9      	bne.n	8001a88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 80a6 	beq.w	8001c0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac6:	4b8b      	ldr	r3, [pc, #556]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10d      	bne.n	8001aee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b88      	ldr	r3, [pc, #544]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	4a87      	ldr	r2, [pc, #540]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001adc:	61d3      	str	r3, [r2, #28]
 8001ade:	4b85      	ldr	r3, [pc, #532]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aea:	2301      	movs	r3, #1
 8001aec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aee:	4b82      	ldr	r3, [pc, #520]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d118      	bne.n	8001b2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001afa:	4b7f      	ldr	r3, [pc, #508]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a7e      	ldr	r2, [pc, #504]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c8>)
 8001b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b06:	f7ff fbbd 	bl	8001284 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0e:	f7ff fbb9 	bl	8001284 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b64      	cmp	r3, #100	@ 0x64
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e103      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b20:	4b75      	ldr	r3, [pc, #468]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x312>
 8001b34:	4b6f      	ldr	r3, [pc, #444]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	4a6e      	ldr	r2, [pc, #440]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6213      	str	r3, [r2, #32]
 8001b40:	e02d      	b.n	8001b9e <HAL_RCC_OscConfig+0x36e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x334>
 8001b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4a69      	ldr	r2, [pc, #420]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	6213      	str	r3, [r2, #32]
 8001b56:	4b67      	ldr	r3, [pc, #412]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a66      	ldr	r2, [pc, #408]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f023 0304 	bic.w	r3, r3, #4
 8001b60:	6213      	str	r3, [r2, #32]
 8001b62:	e01c      	b.n	8001b9e <HAL_RCC_OscConfig+0x36e>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	d10c      	bne.n	8001b86 <HAL_RCC_OscConfig+0x356>
 8001b6c:	4b61      	ldr	r3, [pc, #388]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4a60      	ldr	r2, [pc, #384]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	6213      	str	r3, [r2, #32]
 8001b78:	4b5e      	ldr	r3, [pc, #376]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4a5d      	ldr	r2, [pc, #372]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6213      	str	r3, [r2, #32]
 8001b84:	e00b      	b.n	8001b9e <HAL_RCC_OscConfig+0x36e>
 8001b86:	4b5b      	ldr	r3, [pc, #364]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4a5a      	ldr	r2, [pc, #360]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	6213      	str	r3, [r2, #32]
 8001b92:	4b58      	ldr	r3, [pc, #352]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	4a57      	ldr	r2, [pc, #348]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	f023 0304 	bic.w	r3, r3, #4
 8001b9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d015      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fb6d 	bl	8001284 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7ff fb69 	bl	8001284 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e0b1      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0ee      	beq.n	8001bae <HAL_RCC_OscConfig+0x37e>
 8001bd0:	e014      	b.n	8001bfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd2:	f7ff fb57 	bl	8001284 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7ff fb53 	bl	8001284 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e09b      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf0:	4b40      	ldr	r3, [pc, #256]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1ee      	bne.n	8001bda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d105      	bne.n	8001c0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c02:	4b3c      	ldr	r3, [pc, #240]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4a3b      	ldr	r2, [pc, #236]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8087 	beq.w	8001d26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c18:	4b36      	ldr	r3, [pc, #216]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d061      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d146      	bne.n	8001cba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2c:	4b33      	ldr	r3, [pc, #204]	@ (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7ff fb27 	bl	8001284 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3a:	f7ff fb23 	bl	8001284 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e06d      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4c:	4b29      	ldr	r3, [pc, #164]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f0      	bne.n	8001c3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c60:	d108      	bne.n	8001c74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c62:	4b24      	ldr	r3, [pc, #144]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	4921      	ldr	r1, [pc, #132]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c74:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a19      	ldr	r1, [r3, #32]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c84:	430b      	orrs	r3, r1
 8001c86:	491b      	ldr	r1, [pc, #108]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c92:	f7ff faf7 	bl	8001284 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7ff faf3 	bl	8001284 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e03d      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x46a>
 8001cb8:	e035      	b.n	8001d26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fae0 	bl	8001284 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff fadc 	bl	8001284 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e026      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x498>
 8001ce6:	e01e      	b.n	8001d26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d107      	bne.n	8001d00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e019      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40007000 	.word	0x40007000
 8001cfc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d00:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <HAL_RCC_OscConfig+0x500>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000

08001d34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0d0      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d48:	4b6a      	ldr	r3, [pc, #424]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d910      	bls.n	8001d78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b67      	ldr	r3, [pc, #412]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 0207 	bic.w	r2, r3, #7
 8001d5e:	4965      	ldr	r1, [pc, #404]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	4b63      	ldr	r3, [pc, #396]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0b8      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d020      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d90:	4b59      	ldr	r3, [pc, #356]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a58      	ldr	r2, [pc, #352]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da8:	4b53      	ldr	r3, [pc, #332]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4a52      	ldr	r2, [pc, #328]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001db2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db4:	4b50      	ldr	r3, [pc, #320]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	494d      	ldr	r1, [pc, #308]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d040      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b47      	ldr	r3, [pc, #284]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d115      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e07f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d107      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df2:	4b41      	ldr	r3, [pc, #260]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e073      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e06b      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e12:	4b39      	ldr	r3, [pc, #228]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f023 0203 	bic.w	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4936      	ldr	r1, [pc, #216]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e24:	f7ff fa2e 	bl	8001284 <HAL_GetTick>
 8001e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	e00a      	b.n	8001e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2c:	f7ff fa2a 	bl	8001284 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e053      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e42:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 020c 	and.w	r2, r3, #12
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d1eb      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e54:	4b27      	ldr	r3, [pc, #156]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d210      	bcs.n	8001e84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b24      	ldr	r3, [pc, #144]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 0207 	bic.w	r2, r3, #7
 8001e6a:	4922      	ldr	r1, [pc, #136]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e032      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e90:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4916      	ldr	r1, [pc, #88]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d009      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eae:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	490e      	ldr	r1, [pc, #56]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ec2:	f000 f821 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	490a      	ldr	r1, [pc, #40]	@ (8001efc <HAL_RCC_ClockConfig+0x1c8>)
 8001ed4:	5ccb      	ldrb	r3, [r1, r3]
 8001ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eda:	4a09      	ldr	r2, [pc, #36]	@ (8001f00 <HAL_RCC_ClockConfig+0x1cc>)
 8001edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <HAL_RCC_ClockConfig+0x1d0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff f98c 	bl	8001200 <HAL_InitTick>

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40022000 	.word	0x40022000
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	08002ff8 	.word	0x08002ff8
 8001f00:	20000000 	.word	0x20000000
 8001f04:	20000004 	.word	0x20000004

08001f08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f22:	4b1e      	ldr	r3, [pc, #120]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d002      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x30>
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d003      	beq.n	8001f3e <HAL_RCC_GetSysClockFreq+0x36>
 8001f36:	e027      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f38:	4b19      	ldr	r3, [pc, #100]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f3a:	613b      	str	r3, [r7, #16]
      break;
 8001f3c:	e027      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	0c9b      	lsrs	r3, r3, #18
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	4a17      	ldr	r2, [pc, #92]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f48:	5cd3      	ldrb	r3, [r2, r3]
 8001f4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d010      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f56:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	0c5b      	lsrs	r3, r3, #17
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	4a11      	ldr	r2, [pc, #68]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f6a:	fb03 f202 	mul.w	r2, r3, r2
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	e004      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001fac <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f7c:	fb02 f303 	mul.w	r3, r2, r3
 8001f80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	613b      	str	r3, [r7, #16]
      break;
 8001f86:	e002      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f88:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f8a:	613b      	str	r3, [r7, #16]
      break;
 8001f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f8e:	693b      	ldr	r3, [r7, #16]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	371c      	adds	r7, #28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	007a1200 	.word	0x007a1200
 8001fa4:	08003008 	.word	0x08003008
 8001fa8:	08003018 	.word	0x08003018
 8001fac:	003d0900 	.word	0x003d0900

08001fb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <RCC_Delay+0x34>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe8 <RCC_Delay+0x38>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0a5b      	lsrs	r3, r3, #9
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fcc:	bf00      	nop
  }
  while (Delay --);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	60fa      	str	r2, [r7, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f9      	bne.n	8001fcc <RCC_Delay+0x1c>
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	10624dd3 	.word	0x10624dd3

08001fec <memset>:
 8001fec:	4603      	mov	r3, r0
 8001fee:	4402      	add	r2, r0
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d100      	bne.n	8001ff6 <memset+0xa>
 8001ff4:	4770      	bx	lr
 8001ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8001ffa:	e7f9      	b.n	8001ff0 <memset+0x4>

08001ffc <__libc_init_array>:
 8001ffc:	b570      	push	{r4, r5, r6, lr}
 8001ffe:	2600      	movs	r6, #0
 8002000:	4d0c      	ldr	r5, [pc, #48]	@ (8002034 <__libc_init_array+0x38>)
 8002002:	4c0d      	ldr	r4, [pc, #52]	@ (8002038 <__libc_init_array+0x3c>)
 8002004:	1b64      	subs	r4, r4, r5
 8002006:	10a4      	asrs	r4, r4, #2
 8002008:	42a6      	cmp	r6, r4
 800200a:	d109      	bne.n	8002020 <__libc_init_array+0x24>
 800200c:	f000 ffe8 	bl	8002fe0 <_init>
 8002010:	2600      	movs	r6, #0
 8002012:	4d0a      	ldr	r5, [pc, #40]	@ (800203c <__libc_init_array+0x40>)
 8002014:	4c0a      	ldr	r4, [pc, #40]	@ (8002040 <__libc_init_array+0x44>)
 8002016:	1b64      	subs	r4, r4, r5
 8002018:	10a4      	asrs	r4, r4, #2
 800201a:	42a6      	cmp	r6, r4
 800201c:	d105      	bne.n	800202a <__libc_init_array+0x2e>
 800201e:	bd70      	pop	{r4, r5, r6, pc}
 8002020:	f855 3b04 	ldr.w	r3, [r5], #4
 8002024:	4798      	blx	r3
 8002026:	3601      	adds	r6, #1
 8002028:	e7ee      	b.n	8002008 <__libc_init_array+0xc>
 800202a:	f855 3b04 	ldr.w	r3, [r5], #4
 800202e:	4798      	blx	r3
 8002030:	3601      	adds	r6, #1
 8002032:	e7f2      	b.n	800201a <__libc_init_array+0x1e>
 8002034:	080031f8 	.word	0x080031f8
 8002038:	080031f8 	.word	0x080031f8
 800203c:	080031f8 	.word	0x080031f8
 8002040:	080031fc 	.word	0x080031fc

08002044 <sin>:
 8002044:	b530      	push	{r4, r5, lr}
 8002046:	4d20      	ldr	r5, [pc, #128]	@ (80020c8 <sin+0x84>)
 8002048:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800204c:	42ac      	cmp	r4, r5
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	b087      	sub	sp, #28
 8002054:	d806      	bhi.n	8002064 <sin+0x20>
 8002056:	2300      	movs	r3, #0
 8002058:	2200      	movs	r2, #0
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	2300      	movs	r3, #0
 800205e:	f000 f8f7 	bl	8002250 <__kernel_sin>
 8002062:	e004      	b.n	800206e <sin+0x2a>
 8002064:	4d19      	ldr	r5, [pc, #100]	@ (80020cc <sin+0x88>)
 8002066:	42ac      	cmp	r4, r5
 8002068:	d903      	bls.n	8002072 <sin+0x2e>
 800206a:	f7fe fa0b 	bl	8000484 <__aeabi_dsub>
 800206e:	b007      	add	sp, #28
 8002070:	bd30      	pop	{r4, r5, pc}
 8002072:	aa02      	add	r2, sp, #8
 8002074:	f000 f9a4 	bl	80023c0 <__ieee754_rem_pio2>
 8002078:	f000 0003 	and.w	r0, r0, #3
 800207c:	2801      	cmp	r0, #1
 800207e:	d009      	beq.n	8002094 <sin+0x50>
 8002080:	2802      	cmp	r0, #2
 8002082:	d00e      	beq.n	80020a2 <sin+0x5e>
 8002084:	b9c0      	cbnz	r0, 80020b8 <sin+0x74>
 8002086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800208a:	2301      	movs	r3, #1
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002092:	e7e4      	b.n	800205e <sin+0x1a>
 8002094:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800209c:	f000 f818 	bl	80020d0 <__kernel_cos>
 80020a0:	e7e5      	b.n	800206e <sin+0x2a>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80020ae:	f000 f8cf 	bl	8002250 <__kernel_sin>
 80020b2:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80020b6:	e7da      	b.n	800206e <sin+0x2a>
 80020b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80020bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80020c0:	f000 f806 	bl	80020d0 <__kernel_cos>
 80020c4:	e7f5      	b.n	80020b2 <sin+0x6e>
 80020c6:	bf00      	nop
 80020c8:	3fe921fb 	.word	0x3fe921fb
 80020cc:	7fefffff 	.word	0x7fefffff

080020d0 <__kernel_cos>:
 80020d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020d4:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80020d8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80020dc:	4680      	mov	r8, r0
 80020de:	4689      	mov	r9, r1
 80020e0:	e9cd 2300 	strd	r2, r3, [sp]
 80020e4:	d204      	bcs.n	80020f0 <__kernel_cos+0x20>
 80020e6:	f7fe fc0d 	bl	8000904 <__aeabi_d2iz>
 80020ea:	2800      	cmp	r0, #0
 80020ec:	f000 8086 	beq.w	80021fc <__kernel_cos+0x12c>
 80020f0:	4642      	mov	r2, r8
 80020f2:	464b      	mov	r3, r9
 80020f4:	4640      	mov	r0, r8
 80020f6:	4649      	mov	r1, r9
 80020f8:	f7fe f896 	bl	8000228 <__aeabi_dmul>
 80020fc:	2200      	movs	r2, #0
 80020fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002238 <__kernel_cos+0x168>)
 8002100:	4604      	mov	r4, r0
 8002102:	460d      	mov	r5, r1
 8002104:	f7fe f890 	bl	8000228 <__aeabi_dmul>
 8002108:	a33f      	add	r3, pc, #252	@ (adr r3, 8002208 <__kernel_cos+0x138>)
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	4682      	mov	sl, r0
 8002110:	468b      	mov	fp, r1
 8002112:	4620      	mov	r0, r4
 8002114:	4629      	mov	r1, r5
 8002116:	f7fe f887 	bl	8000228 <__aeabi_dmul>
 800211a:	a33d      	add	r3, pc, #244	@ (adr r3, 8002210 <__kernel_cos+0x140>)
 800211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002120:	f7fe f9b2 	bl	8000488 <__adddf3>
 8002124:	4622      	mov	r2, r4
 8002126:	462b      	mov	r3, r5
 8002128:	f7fe f87e 	bl	8000228 <__aeabi_dmul>
 800212c:	a33a      	add	r3, pc, #232	@ (adr r3, 8002218 <__kernel_cos+0x148>)
 800212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002132:	f7fe f9a7 	bl	8000484 <__aeabi_dsub>
 8002136:	4622      	mov	r2, r4
 8002138:	462b      	mov	r3, r5
 800213a:	f7fe f875 	bl	8000228 <__aeabi_dmul>
 800213e:	a338      	add	r3, pc, #224	@ (adr r3, 8002220 <__kernel_cos+0x150>)
 8002140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002144:	f7fe f9a0 	bl	8000488 <__adddf3>
 8002148:	4622      	mov	r2, r4
 800214a:	462b      	mov	r3, r5
 800214c:	f7fe f86c 	bl	8000228 <__aeabi_dmul>
 8002150:	a335      	add	r3, pc, #212	@ (adr r3, 8002228 <__kernel_cos+0x158>)
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	f7fe f995 	bl	8000484 <__aeabi_dsub>
 800215a:	4622      	mov	r2, r4
 800215c:	462b      	mov	r3, r5
 800215e:	f7fe f863 	bl	8000228 <__aeabi_dmul>
 8002162:	a333      	add	r3, pc, #204	@ (adr r3, 8002230 <__kernel_cos+0x160>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	f7fe f98e 	bl	8000488 <__adddf3>
 800216c:	4622      	mov	r2, r4
 800216e:	462b      	mov	r3, r5
 8002170:	f7fe f85a 	bl	8000228 <__aeabi_dmul>
 8002174:	4622      	mov	r2, r4
 8002176:	462b      	mov	r3, r5
 8002178:	f7fe f856 	bl	8000228 <__aeabi_dmul>
 800217c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002180:	4604      	mov	r4, r0
 8002182:	460d      	mov	r5, r1
 8002184:	4640      	mov	r0, r8
 8002186:	4649      	mov	r1, r9
 8002188:	f7fe f84e 	bl	8000228 <__aeabi_dmul>
 800218c:	460b      	mov	r3, r1
 800218e:	4602      	mov	r2, r0
 8002190:	4629      	mov	r1, r5
 8002192:	4620      	mov	r0, r4
 8002194:	f7fe f976 	bl	8000484 <__aeabi_dsub>
 8002198:	4b28      	ldr	r3, [pc, #160]	@ (800223c <__kernel_cos+0x16c>)
 800219a:	4680      	mov	r8, r0
 800219c:	429e      	cmp	r6, r3
 800219e:	4689      	mov	r9, r1
 80021a0:	d80e      	bhi.n	80021c0 <__kernel_cos+0xf0>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4650      	mov	r0, sl
 80021a8:	4659      	mov	r1, fp
 80021aa:	f7fe f96b 	bl	8000484 <__aeabi_dsub>
 80021ae:	4602      	mov	r2, r0
 80021b0:	2000      	movs	r0, #0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4922      	ldr	r1, [pc, #136]	@ (8002240 <__kernel_cos+0x170>)
 80021b6:	f7fe f965 	bl	8000484 <__aeabi_dsub>
 80021ba:	b003      	add	sp, #12
 80021bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021c0:	2400      	movs	r4, #0
 80021c2:	4b20      	ldr	r3, [pc, #128]	@ (8002244 <__kernel_cos+0x174>)
 80021c4:	4622      	mov	r2, r4
 80021c6:	429e      	cmp	r6, r3
 80021c8:	bf8c      	ite	hi
 80021ca:	4d1f      	ldrhi	r5, [pc, #124]	@ (8002248 <__kernel_cos+0x178>)
 80021cc:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 80021d0:	462b      	mov	r3, r5
 80021d2:	2000      	movs	r0, #0
 80021d4:	491a      	ldr	r1, [pc, #104]	@ (8002240 <__kernel_cos+0x170>)
 80021d6:	f7fe f955 	bl	8000484 <__aeabi_dsub>
 80021da:	4622      	mov	r2, r4
 80021dc:	4606      	mov	r6, r0
 80021de:	460f      	mov	r7, r1
 80021e0:	462b      	mov	r3, r5
 80021e2:	4650      	mov	r0, sl
 80021e4:	4659      	mov	r1, fp
 80021e6:	f7fe f94d 	bl	8000484 <__aeabi_dsub>
 80021ea:	4642      	mov	r2, r8
 80021ec:	464b      	mov	r3, r9
 80021ee:	f7fe f949 	bl	8000484 <__aeabi_dsub>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4630      	mov	r0, r6
 80021f8:	4639      	mov	r1, r7
 80021fa:	e7dc      	b.n	80021b6 <__kernel_cos+0xe6>
 80021fc:	2000      	movs	r0, #0
 80021fe:	4910      	ldr	r1, [pc, #64]	@ (8002240 <__kernel_cos+0x170>)
 8002200:	e7db      	b.n	80021ba <__kernel_cos+0xea>
 8002202:	bf00      	nop
 8002204:	f3af 8000 	nop.w
 8002208:	be8838d4 	.word	0xbe8838d4
 800220c:	bda8fae9 	.word	0xbda8fae9
 8002210:	bdb4b1c4 	.word	0xbdb4b1c4
 8002214:	3e21ee9e 	.word	0x3e21ee9e
 8002218:	809c52ad 	.word	0x809c52ad
 800221c:	3e927e4f 	.word	0x3e927e4f
 8002220:	19cb1590 	.word	0x19cb1590
 8002224:	3efa01a0 	.word	0x3efa01a0
 8002228:	16c15177 	.word	0x16c15177
 800222c:	3f56c16c 	.word	0x3f56c16c
 8002230:	5555554c 	.word	0x5555554c
 8002234:	3fa55555 	.word	0x3fa55555
 8002238:	3fe00000 	.word	0x3fe00000
 800223c:	3fd33332 	.word	0x3fd33332
 8002240:	3ff00000 	.word	0x3ff00000
 8002244:	3fe90000 	.word	0x3fe90000
 8002248:	3fd20000 	.word	0x3fd20000
 800224c:	00000000 	.word	0x00000000

08002250 <__kernel_sin>:
 8002250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002254:	461f      	mov	r7, r3
 8002256:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800225a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800225e:	4604      	mov	r4, r0
 8002260:	460d      	mov	r5, r1
 8002262:	4616      	mov	r6, r2
 8002264:	b085      	sub	sp, #20
 8002266:	d203      	bcs.n	8002270 <__kernel_sin+0x20>
 8002268:	f7fe fb4c 	bl	8000904 <__aeabi_d2iz>
 800226c:	2800      	cmp	r0, #0
 800226e:	d051      	beq.n	8002314 <__kernel_sin+0xc4>
 8002270:	4622      	mov	r2, r4
 8002272:	462b      	mov	r3, r5
 8002274:	4620      	mov	r0, r4
 8002276:	4629      	mov	r1, r5
 8002278:	f7fd ffd6 	bl	8000228 <__aeabi_dmul>
 800227c:	4682      	mov	sl, r0
 800227e:	468b      	mov	fp, r1
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4620      	mov	r0, r4
 8002286:	4629      	mov	r1, r5
 8002288:	f7fd ffce 	bl	8000228 <__aeabi_dmul>
 800228c:	a33e      	add	r3, pc, #248	@ (adr r3, 8002388 <__kernel_sin+0x138>)
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	4680      	mov	r8, r0
 8002294:	4689      	mov	r9, r1
 8002296:	4650      	mov	r0, sl
 8002298:	4659      	mov	r1, fp
 800229a:	f7fd ffc5 	bl	8000228 <__aeabi_dmul>
 800229e:	a33c      	add	r3, pc, #240	@ (adr r3, 8002390 <__kernel_sin+0x140>)
 80022a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a4:	f7fe f8ee 	bl	8000484 <__aeabi_dsub>
 80022a8:	4652      	mov	r2, sl
 80022aa:	465b      	mov	r3, fp
 80022ac:	f7fd ffbc 	bl	8000228 <__aeabi_dmul>
 80022b0:	a339      	add	r3, pc, #228	@ (adr r3, 8002398 <__kernel_sin+0x148>)
 80022b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b6:	f7fe f8e7 	bl	8000488 <__adddf3>
 80022ba:	4652      	mov	r2, sl
 80022bc:	465b      	mov	r3, fp
 80022be:	f7fd ffb3 	bl	8000228 <__aeabi_dmul>
 80022c2:	a337      	add	r3, pc, #220	@ (adr r3, 80023a0 <__kernel_sin+0x150>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f7fe f8dc 	bl	8000484 <__aeabi_dsub>
 80022cc:	4652      	mov	r2, sl
 80022ce:	465b      	mov	r3, fp
 80022d0:	f7fd ffaa 	bl	8000228 <__aeabi_dmul>
 80022d4:	a334      	add	r3, pc, #208	@ (adr r3, 80023a8 <__kernel_sin+0x158>)
 80022d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022da:	f7fe f8d5 	bl	8000488 <__adddf3>
 80022de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80022e0:	e9cd 0100 	strd	r0, r1, [sp]
 80022e4:	b9db      	cbnz	r3, 800231e <__kernel_sin+0xce>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4650      	mov	r0, sl
 80022ec:	4659      	mov	r1, fp
 80022ee:	f7fd ff9b 	bl	8000228 <__aeabi_dmul>
 80022f2:	a32f      	add	r3, pc, #188	@ (adr r3, 80023b0 <__kernel_sin+0x160>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	f7fe f8c4 	bl	8000484 <__aeabi_dsub>
 80022fc:	4642      	mov	r2, r8
 80022fe:	464b      	mov	r3, r9
 8002300:	f7fd ff92 	bl	8000228 <__aeabi_dmul>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4620      	mov	r0, r4
 800230a:	4629      	mov	r1, r5
 800230c:	f7fe f8bc 	bl	8000488 <__adddf3>
 8002310:	4604      	mov	r4, r0
 8002312:	460d      	mov	r5, r1
 8002314:	4620      	mov	r0, r4
 8002316:	4629      	mov	r1, r5
 8002318:	b005      	add	sp, #20
 800231a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800231e:	2200      	movs	r2, #0
 8002320:	4630      	mov	r0, r6
 8002322:	4639      	mov	r1, r7
 8002324:	4b24      	ldr	r3, [pc, #144]	@ (80023b8 <__kernel_sin+0x168>)
 8002326:	f7fd ff7f 	bl	8000228 <__aeabi_dmul>
 800232a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800232e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002332:	4640      	mov	r0, r8
 8002334:	4649      	mov	r1, r9
 8002336:	f7fd ff77 	bl	8000228 <__aeabi_dmul>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002342:	f7fe f89f 	bl	8000484 <__aeabi_dsub>
 8002346:	4652      	mov	r2, sl
 8002348:	465b      	mov	r3, fp
 800234a:	f7fd ff6d 	bl	8000228 <__aeabi_dmul>
 800234e:	4632      	mov	r2, r6
 8002350:	463b      	mov	r3, r7
 8002352:	f7fe f897 	bl	8000484 <__aeabi_dsub>
 8002356:	a316      	add	r3, pc, #88	@ (adr r3, 80023b0 <__kernel_sin+0x160>)
 8002358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235c:	4606      	mov	r6, r0
 800235e:	460f      	mov	r7, r1
 8002360:	4640      	mov	r0, r8
 8002362:	4649      	mov	r1, r9
 8002364:	f7fd ff60 	bl	8000228 <__aeabi_dmul>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4630      	mov	r0, r6
 800236e:	4639      	mov	r1, r7
 8002370:	f7fe f88a 	bl	8000488 <__adddf3>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4620      	mov	r0, r4
 800237a:	4629      	mov	r1, r5
 800237c:	f7fe f882 	bl	8000484 <__aeabi_dsub>
 8002380:	e7c6      	b.n	8002310 <__kernel_sin+0xc0>
 8002382:	bf00      	nop
 8002384:	f3af 8000 	nop.w
 8002388:	5acfd57c 	.word	0x5acfd57c
 800238c:	3de5d93a 	.word	0x3de5d93a
 8002390:	8a2b9ceb 	.word	0x8a2b9ceb
 8002394:	3e5ae5e6 	.word	0x3e5ae5e6
 8002398:	57b1fe7d 	.word	0x57b1fe7d
 800239c:	3ec71de3 	.word	0x3ec71de3
 80023a0:	19c161d5 	.word	0x19c161d5
 80023a4:	3f2a01a0 	.word	0x3f2a01a0
 80023a8:	1110f8a6 	.word	0x1110f8a6
 80023ac:	3f811111 	.word	0x3f811111
 80023b0:	55555549 	.word	0x55555549
 80023b4:	3fc55555 	.word	0x3fc55555
 80023b8:	3fe00000 	.word	0x3fe00000
 80023bc:	00000000 	.word	0x00000000

080023c0 <__ieee754_rem_pio2>:
 80023c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c4:	4bc4      	ldr	r3, [pc, #784]	@ (80026d8 <__ieee754_rem_pio2+0x318>)
 80023c6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80023ca:	b08d      	sub	sp, #52	@ 0x34
 80023cc:	4598      	cmp	r8, r3
 80023ce:	4606      	mov	r6, r0
 80023d0:	460f      	mov	r7, r1
 80023d2:	4614      	mov	r4, r2
 80023d4:	9104      	str	r1, [sp, #16]
 80023d6:	d807      	bhi.n	80023e8 <__ieee754_rem_pio2+0x28>
 80023d8:	e9c2 6700 	strd	r6, r7, [r2]
 80023dc:	2300      	movs	r3, #0
 80023de:	2200      	movs	r2, #0
 80023e0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80023e4:	2500      	movs	r5, #0
 80023e6:	e026      	b.n	8002436 <__ieee754_rem_pio2+0x76>
 80023e8:	4bbc      	ldr	r3, [pc, #752]	@ (80026dc <__ieee754_rem_pio2+0x31c>)
 80023ea:	4598      	cmp	r8, r3
 80023ec:	d876      	bhi.n	80024dc <__ieee754_rem_pio2+0x11c>
 80023ee:	9b04      	ldr	r3, [sp, #16]
 80023f0:	4dbb      	ldr	r5, [pc, #748]	@ (80026e0 <__ieee754_rem_pio2+0x320>)
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	a3aa      	add	r3, pc, #680	@ (adr r3, 80026a0 <__ieee754_rem_pio2+0x2e0>)
 80023f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fa:	dd38      	ble.n	800246e <__ieee754_rem_pio2+0xae>
 80023fc:	f7fe f842 	bl	8000484 <__aeabi_dsub>
 8002400:	45a8      	cmp	r8, r5
 8002402:	4606      	mov	r6, r0
 8002404:	460f      	mov	r7, r1
 8002406:	d01a      	beq.n	800243e <__ieee754_rem_pio2+0x7e>
 8002408:	a3a7      	add	r3, pc, #668	@ (adr r3, 80026a8 <__ieee754_rem_pio2+0x2e8>)
 800240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240e:	f7fe f839 	bl	8000484 <__aeabi_dsub>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4680      	mov	r8, r0
 8002418:	4689      	mov	r9, r1
 800241a:	4630      	mov	r0, r6
 800241c:	4639      	mov	r1, r7
 800241e:	f7fe f831 	bl	8000484 <__aeabi_dsub>
 8002422:	a3a1      	add	r3, pc, #644	@ (adr r3, 80026a8 <__ieee754_rem_pio2+0x2e8>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe f82c 	bl	8000484 <__aeabi_dsub>
 800242c:	2501      	movs	r5, #1
 800242e:	e9c4 8900 	strd	r8, r9, [r4]
 8002432:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002436:	4628      	mov	r0, r5
 8002438:	b00d      	add	sp, #52	@ 0x34
 800243a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800243e:	a39c      	add	r3, pc, #624	@ (adr r3, 80026b0 <__ieee754_rem_pio2+0x2f0>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f7fe f81e 	bl	8000484 <__aeabi_dsub>
 8002448:	a39b      	add	r3, pc, #620	@ (adr r3, 80026b8 <__ieee754_rem_pio2+0x2f8>)
 800244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244e:	4606      	mov	r6, r0
 8002450:	460f      	mov	r7, r1
 8002452:	f7fe f817 	bl	8000484 <__aeabi_dsub>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4680      	mov	r8, r0
 800245c:	4689      	mov	r9, r1
 800245e:	4630      	mov	r0, r6
 8002460:	4639      	mov	r1, r7
 8002462:	f7fe f80f 	bl	8000484 <__aeabi_dsub>
 8002466:	a394      	add	r3, pc, #592	@ (adr r3, 80026b8 <__ieee754_rem_pio2+0x2f8>)
 8002468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246c:	e7dc      	b.n	8002428 <__ieee754_rem_pio2+0x68>
 800246e:	f7fe f80b 	bl	8000488 <__adddf3>
 8002472:	45a8      	cmp	r8, r5
 8002474:	4606      	mov	r6, r0
 8002476:	460f      	mov	r7, r1
 8002478:	d018      	beq.n	80024ac <__ieee754_rem_pio2+0xec>
 800247a:	a38b      	add	r3, pc, #556	@ (adr r3, 80026a8 <__ieee754_rem_pio2+0x2e8>)
 800247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002480:	f7fe f802 	bl	8000488 <__adddf3>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4680      	mov	r8, r0
 800248a:	4689      	mov	r9, r1
 800248c:	4630      	mov	r0, r6
 800248e:	4639      	mov	r1, r7
 8002490:	f7fd fff8 	bl	8000484 <__aeabi_dsub>
 8002494:	a384      	add	r3, pc, #528	@ (adr r3, 80026a8 <__ieee754_rem_pio2+0x2e8>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	f7fd fff5 	bl	8000488 <__adddf3>
 800249e:	f04f 35ff 	mov.w	r5, #4294967295
 80024a2:	e9c4 8900 	strd	r8, r9, [r4]
 80024a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80024aa:	e7c4      	b.n	8002436 <__ieee754_rem_pio2+0x76>
 80024ac:	a380      	add	r3, pc, #512	@ (adr r3, 80026b0 <__ieee754_rem_pio2+0x2f0>)
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	f7fd ffe9 	bl	8000488 <__adddf3>
 80024b6:	a380      	add	r3, pc, #512	@ (adr r3, 80026b8 <__ieee754_rem_pio2+0x2f8>)
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	4606      	mov	r6, r0
 80024be:	460f      	mov	r7, r1
 80024c0:	f7fd ffe2 	bl	8000488 <__adddf3>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4680      	mov	r8, r0
 80024ca:	4689      	mov	r9, r1
 80024cc:	4630      	mov	r0, r6
 80024ce:	4639      	mov	r1, r7
 80024d0:	f7fd ffd8 	bl	8000484 <__aeabi_dsub>
 80024d4:	a378      	add	r3, pc, #480	@ (adr r3, 80026b8 <__ieee754_rem_pio2+0x2f8>)
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	e7de      	b.n	800249a <__ieee754_rem_pio2+0xda>
 80024dc:	4b81      	ldr	r3, [pc, #516]	@ (80026e4 <__ieee754_rem_pio2+0x324>)
 80024de:	4598      	cmp	r8, r3
 80024e0:	f200 80cf 	bhi.w	8002682 <__ieee754_rem_pio2+0x2c2>
 80024e4:	f000 f962 	bl	80027ac <fabs>
 80024e8:	a375      	add	r3, pc, #468	@ (adr r3, 80026c0 <__ieee754_rem_pio2+0x300>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	4606      	mov	r6, r0
 80024f0:	460f      	mov	r7, r1
 80024f2:	f7fd fe99 	bl	8000228 <__aeabi_dmul>
 80024f6:	2200      	movs	r2, #0
 80024f8:	4b7b      	ldr	r3, [pc, #492]	@ (80026e8 <__ieee754_rem_pio2+0x328>)
 80024fa:	f7fd ffc5 	bl	8000488 <__adddf3>
 80024fe:	f7fe fa01 	bl	8000904 <__aeabi_d2iz>
 8002502:	4605      	mov	r5, r0
 8002504:	f7fe f90c 	bl	8000720 <__aeabi_i2d>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002510:	a363      	add	r3, pc, #396	@ (adr r3, 80026a0 <__ieee754_rem_pio2+0x2e0>)
 8002512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002516:	f7fd fe87 	bl	8000228 <__aeabi_dmul>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4630      	mov	r0, r6
 8002520:	4639      	mov	r1, r7
 8002522:	f7fd ffaf 	bl	8000484 <__aeabi_dsub>
 8002526:	a360      	add	r3, pc, #384	@ (adr r3, 80026a8 <__ieee754_rem_pio2+0x2e8>)
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	4682      	mov	sl, r0
 800252e:	468b      	mov	fp, r1
 8002530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002534:	f7fd fe78 	bl	8000228 <__aeabi_dmul>
 8002538:	2d1f      	cmp	r5, #31
 800253a:	4606      	mov	r6, r0
 800253c:	460f      	mov	r7, r1
 800253e:	dc0c      	bgt.n	800255a <__ieee754_rem_pio2+0x19a>
 8002540:	4b6a      	ldr	r3, [pc, #424]	@ (80026ec <__ieee754_rem_pio2+0x32c>)
 8002542:	1e6a      	subs	r2, r5, #1
 8002544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002548:	4543      	cmp	r3, r8
 800254a:	d006      	beq.n	800255a <__ieee754_rem_pio2+0x19a>
 800254c:	4632      	mov	r2, r6
 800254e:	463b      	mov	r3, r7
 8002550:	4650      	mov	r0, sl
 8002552:	4659      	mov	r1, fp
 8002554:	f7fd ff96 	bl	8000484 <__aeabi_dsub>
 8002558:	e00e      	b.n	8002578 <__ieee754_rem_pio2+0x1b8>
 800255a:	463b      	mov	r3, r7
 800255c:	4632      	mov	r2, r6
 800255e:	4650      	mov	r0, sl
 8002560:	4659      	mov	r1, fp
 8002562:	f7fd ff8f 	bl	8000484 <__aeabi_dsub>
 8002566:	ea4f 5328 	mov.w	r3, r8, asr #20
 800256a:	9305      	str	r3, [sp, #20]
 800256c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002570:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8002574:	2b10      	cmp	r3, #16
 8002576:	dc02      	bgt.n	800257e <__ieee754_rem_pio2+0x1be>
 8002578:	e9c4 0100 	strd	r0, r1, [r4]
 800257c:	e039      	b.n	80025f2 <__ieee754_rem_pio2+0x232>
 800257e:	a34c      	add	r3, pc, #304	@ (adr r3, 80026b0 <__ieee754_rem_pio2+0x2f0>)
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002588:	f7fd fe4e 	bl	8000228 <__aeabi_dmul>
 800258c:	4606      	mov	r6, r0
 800258e:	460f      	mov	r7, r1
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4650      	mov	r0, sl
 8002596:	4659      	mov	r1, fp
 8002598:	f7fd ff74 	bl	8000484 <__aeabi_dsub>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4680      	mov	r8, r0
 80025a2:	4689      	mov	r9, r1
 80025a4:	4650      	mov	r0, sl
 80025a6:	4659      	mov	r1, fp
 80025a8:	f7fd ff6c 	bl	8000484 <__aeabi_dsub>
 80025ac:	4632      	mov	r2, r6
 80025ae:	463b      	mov	r3, r7
 80025b0:	f7fd ff68 	bl	8000484 <__aeabi_dsub>
 80025b4:	a340      	add	r3, pc, #256	@ (adr r3, 80026b8 <__ieee754_rem_pio2+0x2f8>)
 80025b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ba:	4606      	mov	r6, r0
 80025bc:	460f      	mov	r7, r1
 80025be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80025c2:	f7fd fe31 	bl	8000228 <__aeabi_dmul>
 80025c6:	4632      	mov	r2, r6
 80025c8:	463b      	mov	r3, r7
 80025ca:	f7fd ff5b 	bl	8000484 <__aeabi_dsub>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4606      	mov	r6, r0
 80025d4:	460f      	mov	r7, r1
 80025d6:	4640      	mov	r0, r8
 80025d8:	4649      	mov	r1, r9
 80025da:	f7fd ff53 	bl	8000484 <__aeabi_dsub>
 80025de:	9a05      	ldr	r2, [sp, #20]
 80025e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b31      	cmp	r3, #49	@ 0x31
 80025e8:	dc20      	bgt.n	800262c <__ieee754_rem_pio2+0x26c>
 80025ea:	46c2      	mov	sl, r8
 80025ec:	46cb      	mov	fp, r9
 80025ee:	e9c4 0100 	strd	r0, r1, [r4]
 80025f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80025f6:	4650      	mov	r0, sl
 80025f8:	4642      	mov	r2, r8
 80025fa:	464b      	mov	r3, r9
 80025fc:	4659      	mov	r1, fp
 80025fe:	f7fd ff41 	bl	8000484 <__aeabi_dsub>
 8002602:	463b      	mov	r3, r7
 8002604:	4632      	mov	r2, r6
 8002606:	f7fd ff3d 	bl	8000484 <__aeabi_dsub>
 800260a:	9b04      	ldr	r3, [sp, #16]
 800260c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	f6bf af10 	bge.w	8002436 <__ieee754_rem_pio2+0x76>
 8002616:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800261a:	6063      	str	r3, [r4, #4]
 800261c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002620:	f8c4 8000 	str.w	r8, [r4]
 8002624:	60a0      	str	r0, [r4, #8]
 8002626:	60e3      	str	r3, [r4, #12]
 8002628:	426d      	negs	r5, r5
 800262a:	e704      	b.n	8002436 <__ieee754_rem_pio2+0x76>
 800262c:	a326      	add	r3, pc, #152	@ (adr r3, 80026c8 <__ieee754_rem_pio2+0x308>)
 800262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002636:	f7fd fdf7 	bl	8000228 <__aeabi_dmul>
 800263a:	4606      	mov	r6, r0
 800263c:	460f      	mov	r7, r1
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4640      	mov	r0, r8
 8002644:	4649      	mov	r1, r9
 8002646:	f7fd ff1d 	bl	8000484 <__aeabi_dsub>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4682      	mov	sl, r0
 8002650:	468b      	mov	fp, r1
 8002652:	4640      	mov	r0, r8
 8002654:	4649      	mov	r1, r9
 8002656:	f7fd ff15 	bl	8000484 <__aeabi_dsub>
 800265a:	4632      	mov	r2, r6
 800265c:	463b      	mov	r3, r7
 800265e:	f7fd ff11 	bl	8000484 <__aeabi_dsub>
 8002662:	a31b      	add	r3, pc, #108	@ (adr r3, 80026d0 <__ieee754_rem_pio2+0x310>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	4606      	mov	r6, r0
 800266a:	460f      	mov	r7, r1
 800266c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002670:	f7fd fdda 	bl	8000228 <__aeabi_dmul>
 8002674:	4632      	mov	r2, r6
 8002676:	463b      	mov	r3, r7
 8002678:	f7fd ff04 	bl	8000484 <__aeabi_dsub>
 800267c:	4606      	mov	r6, r0
 800267e:	460f      	mov	r7, r1
 8002680:	e764      	b.n	800254c <__ieee754_rem_pio2+0x18c>
 8002682:	4b1b      	ldr	r3, [pc, #108]	@ (80026f0 <__ieee754_rem_pio2+0x330>)
 8002684:	4598      	cmp	r8, r3
 8002686:	d935      	bls.n	80026f4 <__ieee754_rem_pio2+0x334>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	f7fd fefa 	bl	8000484 <__aeabi_dsub>
 8002690:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002694:	e9c4 0100 	strd	r0, r1, [r4]
 8002698:	e6a4      	b.n	80023e4 <__ieee754_rem_pio2+0x24>
 800269a:	bf00      	nop
 800269c:	f3af 8000 	nop.w
 80026a0:	54400000 	.word	0x54400000
 80026a4:	3ff921fb 	.word	0x3ff921fb
 80026a8:	1a626331 	.word	0x1a626331
 80026ac:	3dd0b461 	.word	0x3dd0b461
 80026b0:	1a600000 	.word	0x1a600000
 80026b4:	3dd0b461 	.word	0x3dd0b461
 80026b8:	2e037073 	.word	0x2e037073
 80026bc:	3ba3198a 	.word	0x3ba3198a
 80026c0:	6dc9c883 	.word	0x6dc9c883
 80026c4:	3fe45f30 	.word	0x3fe45f30
 80026c8:	2e000000 	.word	0x2e000000
 80026cc:	3ba3198a 	.word	0x3ba3198a
 80026d0:	252049c1 	.word	0x252049c1
 80026d4:	397b839a 	.word	0x397b839a
 80026d8:	3fe921fb 	.word	0x3fe921fb
 80026dc:	4002d97b 	.word	0x4002d97b
 80026e0:	3ff921fb 	.word	0x3ff921fb
 80026e4:	413921fb 	.word	0x413921fb
 80026e8:	3fe00000 	.word	0x3fe00000
 80026ec:	0800301c 	.word	0x0800301c
 80026f0:	7fefffff 	.word	0x7fefffff
 80026f4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80026f8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80026fc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8002700:	460f      	mov	r7, r1
 8002702:	f7fe f8ff 	bl	8000904 <__aeabi_d2iz>
 8002706:	f7fe f80b 	bl	8000720 <__aeabi_i2d>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4630      	mov	r0, r6
 8002710:	4639      	mov	r1, r7
 8002712:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002716:	f7fd feb5 	bl	8000484 <__aeabi_dsub>
 800271a:	2200      	movs	r2, #0
 800271c:	4b21      	ldr	r3, [pc, #132]	@ (80027a4 <__ieee754_rem_pio2+0x3e4>)
 800271e:	f7fd fd83 	bl	8000228 <__aeabi_dmul>
 8002722:	460f      	mov	r7, r1
 8002724:	4606      	mov	r6, r0
 8002726:	f7fe f8ed 	bl	8000904 <__aeabi_d2iz>
 800272a:	f7fd fff9 	bl	8000720 <__aeabi_i2d>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4630      	mov	r0, r6
 8002734:	4639      	mov	r1, r7
 8002736:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800273a:	f7fd fea3 	bl	8000484 <__aeabi_dsub>
 800273e:	2200      	movs	r2, #0
 8002740:	4b18      	ldr	r3, [pc, #96]	@ (80027a4 <__ieee754_rem_pio2+0x3e4>)
 8002742:	f7fd fd71 	bl	8000228 <__aeabi_dmul>
 8002746:	f04f 0803 	mov.w	r8, #3
 800274a:	2600      	movs	r6, #0
 800274c:	2700      	movs	r7, #0
 800274e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8002752:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8002756:	4632      	mov	r2, r6
 8002758:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800275c:	463b      	mov	r3, r7
 800275e:	46c2      	mov	sl, r8
 8002760:	f108 38ff 	add.w	r8, r8, #4294967295
 8002764:	f7fe f89c 	bl	80008a0 <__aeabi_dcmpeq>
 8002768:	2800      	cmp	r0, #0
 800276a:	d1f4      	bne.n	8002756 <__ieee754_rem_pio2+0x396>
 800276c:	4b0e      	ldr	r3, [pc, #56]	@ (80027a8 <__ieee754_rem_pio2+0x3e8>)
 800276e:	462a      	mov	r2, r5
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	2302      	movs	r3, #2
 8002774:	4621      	mov	r1, r4
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	a806      	add	r0, sp, #24
 800277a:	4653      	mov	r3, sl
 800277c:	f000 f81a 	bl	80027b4 <__kernel_rem_pio2>
 8002780:	9b04      	ldr	r3, [sp, #16]
 8002782:	4605      	mov	r5, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	f6bf ae56 	bge.w	8002436 <__ieee754_rem_pio2+0x76>
 800278a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800278e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002792:	e9c4 2300 	strd	r2, r3, [r4]
 8002796:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800279a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800279e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80027a2:	e741      	b.n	8002628 <__ieee754_rem_pio2+0x268>
 80027a4:	41700000 	.word	0x41700000
 80027a8:	0800309c 	.word	0x0800309c

080027ac <fabs>:
 80027ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80027b0:	4619      	mov	r1, r3
 80027b2:	4770      	bx	lr

080027b4 <__kernel_rem_pio2>:
 80027b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80027bc:	9308      	str	r3, [sp, #32]
 80027be:	9104      	str	r1, [sp, #16]
 80027c0:	4bba      	ldr	r3, [pc, #744]	@ (8002aac <__kernel_rem_pio2+0x2f8>)
 80027c2:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 80027c4:	f112 0f14 	cmn.w	r2, #20
 80027c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027cc:	bfa8      	it	ge
 80027ce:	1ed4      	subge	r4, r2, #3
 80027d0:	9302      	str	r3, [sp, #8]
 80027d2:	9b08      	ldr	r3, [sp, #32]
 80027d4:	bfb8      	it	lt
 80027d6:	2400      	movlt	r4, #0
 80027d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80027dc:	9306      	str	r3, [sp, #24]
 80027de:	bfa4      	itt	ge
 80027e0:	2318      	movge	r3, #24
 80027e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80027e6:	f06f 0317 	mvn.w	r3, #23
 80027ea:	fb04 3303 	mla	r3, r4, r3, r3
 80027ee:	eb03 0a02 	add.w	sl, r3, r2
 80027f2:	9a06      	ldr	r2, [sp, #24]
 80027f4:	9b02      	ldr	r3, [sp, #8]
 80027f6:	1aa7      	subs	r7, r4, r2
 80027f8:	eb03 0802 	add.w	r8, r3, r2
 80027fc:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80027fe:	2500      	movs	r5, #0
 8002800:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8002804:	2200      	movs	r2, #0
 8002806:	2300      	movs	r3, #0
 8002808:	9009      	str	r0, [sp, #36]	@ 0x24
 800280a:	ae20      	add	r6, sp, #128	@ 0x80
 800280c:	4545      	cmp	r5, r8
 800280e:	dd13      	ble.n	8002838 <__kernel_rem_pio2+0x84>
 8002810:	2700      	movs	r7, #0
 8002812:	9a08      	ldr	r2, [sp, #32]
 8002814:	ab20      	add	r3, sp, #128	@ 0x80
 8002816:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800281a:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800281e:	9b02      	ldr	r3, [sp, #8]
 8002820:	429f      	cmp	r7, r3
 8002822:	dc33      	bgt.n	800288c <__kernel_rem_pio2+0xd8>
 8002824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002826:	2200      	movs	r2, #0
 8002828:	f1a3 0908 	sub.w	r9, r3, #8
 800282c:	2300      	movs	r3, #0
 800282e:	46a8      	mov	r8, r5
 8002830:	2600      	movs	r6, #0
 8002832:	e9cd 2300 	strd	r2, r3, [sp]
 8002836:	e01f      	b.n	8002878 <__kernel_rem_pio2+0xc4>
 8002838:	42ef      	cmn	r7, r5
 800283a:	d40b      	bmi.n	8002854 <__kernel_rem_pio2+0xa0>
 800283c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8002840:	e9cd 2300 	strd	r2, r3, [sp]
 8002844:	f7fd ff6c 	bl	8000720 <__aeabi_i2d>
 8002848:	e9dd 2300 	ldrd	r2, r3, [sp]
 800284c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8002850:	3501      	adds	r5, #1
 8002852:	e7db      	b.n	800280c <__kernel_rem_pio2+0x58>
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	e7f8      	b.n	800284c <__kernel_rem_pio2+0x98>
 800285a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800285e:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8002862:	f7fd fce1 	bl	8000228 <__aeabi_dmul>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800286e:	f7fd fe0b 	bl	8000488 <__adddf3>
 8002872:	e9cd 0100 	strd	r0, r1, [sp]
 8002876:	3601      	adds	r6, #1
 8002878:	9b06      	ldr	r3, [sp, #24]
 800287a:	429e      	cmp	r6, r3
 800287c:	dded      	ble.n	800285a <__kernel_rem_pio2+0xa6>
 800287e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002882:	3701      	adds	r7, #1
 8002884:	e8eb 2302 	strd	r2, r3, [fp], #8
 8002888:	3508      	adds	r5, #8
 800288a:	e7c8      	b.n	800281e <__kernel_rem_pio2+0x6a>
 800288c:	9b02      	ldr	r3, [sp, #8]
 800288e:	aa0c      	add	r2, sp, #48	@ 0x30
 8002890:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002894:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002896:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8002898:	f8dd b008 	ldr.w	fp, [sp, #8]
 800289c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80028a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80028a2:	ab98      	add	r3, sp, #608	@ 0x260
 80028a4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80028a8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 80028ac:	ab70      	add	r3, sp, #448	@ 0x1c0
 80028ae:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80028b2:	ae0c      	add	r6, sp, #48	@ 0x30
 80028b4:	4699      	mov	r9, r3
 80028b6:	46b0      	mov	r8, r6
 80028b8:	465f      	mov	r7, fp
 80028ba:	9307      	str	r3, [sp, #28]
 80028bc:	2f00      	cmp	r7, #0
 80028be:	dc71      	bgt.n	80029a4 <__kernel_rem_pio2+0x1f0>
 80028c0:	4652      	mov	r2, sl
 80028c2:	4620      	mov	r0, r4
 80028c4:	4629      	mov	r1, r5
 80028c6:	f000 fa97 	bl	8002df8 <scalbn>
 80028ca:	2200      	movs	r2, #0
 80028cc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80028d0:	4604      	mov	r4, r0
 80028d2:	460d      	mov	r5, r1
 80028d4:	f7fd fca8 	bl	8000228 <__aeabi_dmul>
 80028d8:	f000 fb02 	bl	8002ee0 <floor>
 80028dc:	2200      	movs	r2, #0
 80028de:	4b74      	ldr	r3, [pc, #464]	@ (8002ab0 <__kernel_rem_pio2+0x2fc>)
 80028e0:	f7fd fca2 	bl	8000228 <__aeabi_dmul>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4620      	mov	r0, r4
 80028ea:	4629      	mov	r1, r5
 80028ec:	f7fd fdca 	bl	8000484 <__aeabi_dsub>
 80028f0:	460d      	mov	r5, r1
 80028f2:	4604      	mov	r4, r0
 80028f4:	f7fe f806 	bl	8000904 <__aeabi_d2iz>
 80028f8:	9005      	str	r0, [sp, #20]
 80028fa:	f7fd ff11 	bl	8000720 <__aeabi_i2d>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4620      	mov	r0, r4
 8002904:	4629      	mov	r1, r5
 8002906:	f7fd fdbd 	bl	8000484 <__aeabi_dsub>
 800290a:	f1ba 0f00 	cmp.w	sl, #0
 800290e:	4680      	mov	r8, r0
 8002910:	4689      	mov	r9, r1
 8002912:	dd6d      	ble.n	80029f0 <__kernel_rem_pio2+0x23c>
 8002914:	f10b 31ff 	add.w	r1, fp, #4294967295
 8002918:	ab0c      	add	r3, sp, #48	@ 0x30
 800291a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800291e:	9c05      	ldr	r4, [sp, #20]
 8002920:	f1ca 0018 	rsb	r0, sl, #24
 8002924:	fa43 f200 	asr.w	r2, r3, r0
 8002928:	4414      	add	r4, r2
 800292a:	4082      	lsls	r2, r0
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	aa0c      	add	r2, sp, #48	@ 0x30
 8002930:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002934:	f1ca 0217 	rsb	r2, sl, #23
 8002938:	9405      	str	r4, [sp, #20]
 800293a:	4113      	asrs	r3, r2
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	9b00      	ldr	r3, [sp, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	dd64      	ble.n	8002a0e <__kernel_rem_pio2+0x25a>
 8002944:	2200      	movs	r2, #0
 8002946:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800294a:	4614      	mov	r4, r2
 800294c:	9b05      	ldr	r3, [sp, #20]
 800294e:	3301      	adds	r3, #1
 8002950:	9305      	str	r3, [sp, #20]
 8002952:	4593      	cmp	fp, r2
 8002954:	f300 809d 	bgt.w	8002a92 <__kernel_rem_pio2+0x2de>
 8002958:	f1ba 0f00 	cmp.w	sl, #0
 800295c:	dd07      	ble.n	800296e <__kernel_rem_pio2+0x1ba>
 800295e:	f1ba 0f01 	cmp.w	sl, #1
 8002962:	f000 80b3 	beq.w	8002acc <__kernel_rem_pio2+0x318>
 8002966:	f1ba 0f02 	cmp.w	sl, #2
 800296a:	f000 80ba 	beq.w	8002ae2 <__kernel_rem_pio2+0x32e>
 800296e:	9b00      	ldr	r3, [sp, #0]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d14c      	bne.n	8002a0e <__kernel_rem_pio2+0x25a>
 8002974:	4642      	mov	r2, r8
 8002976:	464b      	mov	r3, r9
 8002978:	2000      	movs	r0, #0
 800297a:	494e      	ldr	r1, [pc, #312]	@ (8002ab4 <__kernel_rem_pio2+0x300>)
 800297c:	f7fd fd82 	bl	8000484 <__aeabi_dsub>
 8002980:	4680      	mov	r8, r0
 8002982:	4689      	mov	r9, r1
 8002984:	2c00      	cmp	r4, #0
 8002986:	d042      	beq.n	8002a0e <__kernel_rem_pio2+0x25a>
 8002988:	4652      	mov	r2, sl
 800298a:	2000      	movs	r0, #0
 800298c:	4949      	ldr	r1, [pc, #292]	@ (8002ab4 <__kernel_rem_pio2+0x300>)
 800298e:	f000 fa33 	bl	8002df8 <scalbn>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4640      	mov	r0, r8
 8002998:	4649      	mov	r1, r9
 800299a:	f7fd fd73 	bl	8000484 <__aeabi_dsub>
 800299e:	4680      	mov	r8, r0
 80029a0:	4689      	mov	r9, r1
 80029a2:	e034      	b.n	8002a0e <__kernel_rem_pio2+0x25a>
 80029a4:	2200      	movs	r2, #0
 80029a6:	4b44      	ldr	r3, [pc, #272]	@ (8002ab8 <__kernel_rem_pio2+0x304>)
 80029a8:	4620      	mov	r0, r4
 80029aa:	4629      	mov	r1, r5
 80029ac:	f7fd fc3c 	bl	8000228 <__aeabi_dmul>
 80029b0:	f7fd ffa8 	bl	8000904 <__aeabi_d2iz>
 80029b4:	f7fd feb4 	bl	8000720 <__aeabi_i2d>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	e9cd 2300 	strd	r2, r3, [sp]
 80029c0:	2200      	movs	r2, #0
 80029c2:	4b3e      	ldr	r3, [pc, #248]	@ (8002abc <__kernel_rem_pio2+0x308>)
 80029c4:	f7fd fc30 	bl	8000228 <__aeabi_dmul>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4620      	mov	r0, r4
 80029ce:	4629      	mov	r1, r5
 80029d0:	f7fd fd58 	bl	8000484 <__aeabi_dsub>
 80029d4:	f7fd ff96 	bl	8000904 <__aeabi_d2iz>
 80029d8:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 80029dc:	f848 0b04 	str.w	r0, [r8], #4
 80029e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80029e4:	f7fd fd50 	bl	8000488 <__adddf3>
 80029e8:	3f01      	subs	r7, #1
 80029ea:	4604      	mov	r4, r0
 80029ec:	460d      	mov	r5, r1
 80029ee:	e765      	b.n	80028bc <__kernel_rem_pio2+0x108>
 80029f0:	d106      	bne.n	8002a00 <__kernel_rem_pio2+0x24c>
 80029f2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80029f6:	aa0c      	add	r2, sp, #48	@ 0x30
 80029f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fc:	15db      	asrs	r3, r3, #23
 80029fe:	e79d      	b.n	800293c <__kernel_rem_pio2+0x188>
 8002a00:	2200      	movs	r2, #0
 8002a02:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac0 <__kernel_rem_pio2+0x30c>)
 8002a04:	f7fd ff6a 	bl	80008dc <__aeabi_dcmpge>
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	d13f      	bne.n	8002a8c <__kernel_rem_pio2+0x2d8>
 8002a0c:	9000      	str	r0, [sp, #0]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2300      	movs	r3, #0
 8002a12:	4640      	mov	r0, r8
 8002a14:	4649      	mov	r1, r9
 8002a16:	f7fd ff43 	bl	80008a0 <__aeabi_dcmpeq>
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	f000 80b0 	beq.w	8002b80 <__kernel_rem_pio2+0x3cc>
 8002a20:	2200      	movs	r2, #0
 8002a22:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002a26:	9902      	ldr	r1, [sp, #8]
 8002a28:	428b      	cmp	r3, r1
 8002a2a:	da62      	bge.n	8002af2 <__kernel_rem_pio2+0x33e>
 8002a2c:	2a00      	cmp	r2, #0
 8002a2e:	d077      	beq.n	8002b20 <__kernel_rem_pio2+0x36c>
 8002a30:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002a34:	ab0c      	add	r3, sp, #48	@ 0x30
 8002a36:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8002a3a:	f1aa 0a18 	sub.w	sl, sl, #24
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f6      	beq.n	8002a30 <__kernel_rem_pio2+0x27c>
 8002a42:	4652      	mov	r2, sl
 8002a44:	2000      	movs	r0, #0
 8002a46:	491b      	ldr	r1, [pc, #108]	@ (8002ab4 <__kernel_rem_pio2+0x300>)
 8002a48:	f000 f9d6 	bl	8002df8 <scalbn>
 8002a4c:	465d      	mov	r5, fp
 8002a4e:	4606      	mov	r6, r0
 8002a50:	460f      	mov	r7, r1
 8002a52:	f04f 0900 	mov.w	r9, #0
 8002a56:	ab70      	add	r3, sp, #448	@ 0x1c0
 8002a58:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8002ab8 <__kernel_rem_pio2+0x304>
 8002a5c:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8002a60:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8002a64:	2d00      	cmp	r5, #0
 8002a66:	f280 80c1 	bge.w	8002bec <__kernel_rem_pio2+0x438>
 8002a6a:	465d      	mov	r5, fp
 8002a6c:	2d00      	cmp	r5, #0
 8002a6e:	f2c0 80f1 	blt.w	8002c54 <__kernel_rem_pio2+0x4a0>
 8002a72:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <__kernel_rem_pio2+0x310>)
 8002a74:	f04f 0900 	mov.w	r9, #0
 8002a78:	9306      	str	r3, [sp, #24]
 8002a7a:	ab70      	add	r3, sp, #448	@ 0x1c0
 8002a7c:	f04f 0a00 	mov.w	sl, #0
 8002a80:	2700      	movs	r7, #0
 8002a82:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8002a86:	ebab 0605 	sub.w	r6, fp, r5
 8002a8a:	e0d7      	b.n	8002c3c <__kernel_rem_pio2+0x488>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	e758      	b.n	8002944 <__kernel_rem_pio2+0x190>
 8002a92:	f856 3b04 	ldr.w	r3, [r6], #4
 8002a96:	b9bc      	cbnz	r4, 8002ac8 <__kernel_rem_pio2+0x314>
 8002a98:	b123      	cbz	r3, 8002aa4 <__kernel_rem_pio2+0x2f0>
 8002a9a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8002a9e:	f846 3c04 	str.w	r3, [r6, #-4]
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	461c      	mov	r4, r3
 8002aa6:	3201      	adds	r2, #1
 8002aa8:	e753      	b.n	8002952 <__kernel_rem_pio2+0x19e>
 8002aaa:	bf00      	nop
 8002aac:	080031e8 	.word	0x080031e8
 8002ab0:	40200000 	.word	0x40200000
 8002ab4:	3ff00000 	.word	0x3ff00000
 8002ab8:	3e700000 	.word	0x3e700000
 8002abc:	41700000 	.word	0x41700000
 8002ac0:	3fe00000 	.word	0x3fe00000
 8002ac4:	080031a8 	.word	0x080031a8
 8002ac8:	1acb      	subs	r3, r1, r3
 8002aca:	e7e8      	b.n	8002a9e <__kernel_rem_pio2+0x2ea>
 8002acc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8002ad0:	ab0c      	add	r3, sp, #48	@ 0x30
 8002ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002ada:	a90c      	add	r1, sp, #48	@ 0x30
 8002adc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8002ae0:	e745      	b.n	800296e <__kernel_rem_pio2+0x1ba>
 8002ae2:	f10b 32ff 	add.w	r2, fp, #4294967295
 8002ae6:	ab0c      	add	r3, sp, #48	@ 0x30
 8002ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002af0:	e7f3      	b.n	8002ada <__kernel_rem_pio2+0x326>
 8002af2:	a90c      	add	r1, sp, #48	@ 0x30
 8002af4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	430a      	orrs	r2, r1
 8002afc:	e793      	b.n	8002a26 <__kernel_rem_pio2+0x272>
 8002afe:	3401      	adds	r4, #1
 8002b00:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8002b04:	2a00      	cmp	r2, #0
 8002b06:	d0fa      	beq.n	8002afe <__kernel_rem_pio2+0x34a>
 8002b08:	9b08      	ldr	r3, [sp, #32]
 8002b0a:	aa20      	add	r2, sp, #128	@ 0x80
 8002b0c:	445b      	add	r3, fp
 8002b0e:	f10b 0801 	add.w	r8, fp, #1
 8002b12:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8002b16:	445c      	add	r4, fp
 8002b18:	4544      	cmp	r4, r8
 8002b1a:	da04      	bge.n	8002b26 <__kernel_rem_pio2+0x372>
 8002b1c:	46a3      	mov	fp, r4
 8002b1e:	e6c0      	b.n	80028a2 <__kernel_rem_pio2+0xee>
 8002b20:	2401      	movs	r4, #1
 8002b22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002b24:	e7ec      	b.n	8002b00 <__kernel_rem_pio2+0x34c>
 8002b26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002b28:	46ab      	mov	fp, r5
 8002b2a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8002b2e:	f7fd fdf7 	bl	8000720 <__aeabi_i2d>
 8002b32:	f04f 0900 	mov.w	r9, #0
 8002b36:	2600      	movs	r6, #0
 8002b38:	2700      	movs	r7, #0
 8002b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8002b40:	3b08      	subs	r3, #8
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	9b06      	ldr	r3, [sp, #24]
 8002b46:	4599      	cmp	r9, r3
 8002b48:	dd07      	ble.n	8002b5a <__kernel_rem_pio2+0x3a6>
 8002b4a:	9b07      	ldr	r3, [sp, #28]
 8002b4c:	f108 0801 	add.w	r8, r8, #1
 8002b50:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8002b54:	3508      	adds	r5, #8
 8002b56:	9307      	str	r3, [sp, #28]
 8002b58:	e7de      	b.n	8002b18 <__kernel_rem_pio2+0x364>
 8002b5a:	9900      	ldr	r1, [sp, #0]
 8002b5c:	f109 0901 	add.w	r9, r9, #1
 8002b60:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8002b64:	9100      	str	r1, [sp, #0]
 8002b66:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8002b6a:	f7fd fb5d 	bl	8000228 <__aeabi_dmul>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4630      	mov	r0, r6
 8002b74:	4639      	mov	r1, r7
 8002b76:	f7fd fc87 	bl	8000488 <__adddf3>
 8002b7a:	4606      	mov	r6, r0
 8002b7c:	460f      	mov	r7, r1
 8002b7e:	e7e1      	b.n	8002b44 <__kernel_rem_pio2+0x390>
 8002b80:	f1ca 0200 	rsb	r2, sl, #0
 8002b84:	4640      	mov	r0, r8
 8002b86:	4649      	mov	r1, r9
 8002b88:	f000 f936 	bl	8002df8 <scalbn>
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	4b97      	ldr	r3, [pc, #604]	@ (8002dec <__kernel_rem_pio2+0x638>)
 8002b90:	4604      	mov	r4, r0
 8002b92:	460d      	mov	r5, r1
 8002b94:	f7fd fea2 	bl	80008dc <__aeabi_dcmpge>
 8002b98:	b300      	cbz	r0, 8002bdc <__kernel_rem_pio2+0x428>
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	4b94      	ldr	r3, [pc, #592]	@ (8002df0 <__kernel_rem_pio2+0x63c>)
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	f7fd fb41 	bl	8000228 <__aeabi_dmul>
 8002ba6:	f7fd fead 	bl	8000904 <__aeabi_d2iz>
 8002baa:	4606      	mov	r6, r0
 8002bac:	f7fd fdb8 	bl	8000720 <__aeabi_i2d>
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4b8e      	ldr	r3, [pc, #568]	@ (8002dec <__kernel_rem_pio2+0x638>)
 8002bb4:	f7fd fb38 	bl	8000228 <__aeabi_dmul>
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4602      	mov	r2, r0
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f7fd fc60 	bl	8000484 <__aeabi_dsub>
 8002bc4:	f7fd fe9e 	bl	8000904 <__aeabi_d2iz>
 8002bc8:	ab0c      	add	r3, sp, #48	@ 0x30
 8002bca:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8002bce:	f10b 0b01 	add.w	fp, fp, #1
 8002bd2:	f10a 0a18 	add.w	sl, sl, #24
 8002bd6:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8002bda:	e732      	b.n	8002a42 <__kernel_rem_pio2+0x28e>
 8002bdc:	4620      	mov	r0, r4
 8002bde:	4629      	mov	r1, r5
 8002be0:	f7fd fe90 	bl	8000904 <__aeabi_d2iz>
 8002be4:	ab0c      	add	r3, sp, #48	@ 0x30
 8002be6:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8002bea:	e72a      	b.n	8002a42 <__kernel_rem_pio2+0x28e>
 8002bec:	ab0c      	add	r3, sp, #48	@ 0x30
 8002bee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002bf2:	f7fd fd95 	bl	8000720 <__aeabi_i2d>
 8002bf6:	4632      	mov	r2, r6
 8002bf8:	463b      	mov	r3, r7
 8002bfa:	f7fd fb15 	bl	8000228 <__aeabi_dmul>
 8002bfe:	464a      	mov	r2, r9
 8002c00:	e868 0102 	strd	r0, r1, [r8], #-8
 8002c04:	4653      	mov	r3, sl
 8002c06:	4630      	mov	r0, r6
 8002c08:	4639      	mov	r1, r7
 8002c0a:	f7fd fb0d 	bl	8000228 <__aeabi_dmul>
 8002c0e:	3d01      	subs	r5, #1
 8002c10:	4606      	mov	r6, r0
 8002c12:	460f      	mov	r7, r1
 8002c14:	e726      	b.n	8002a64 <__kernel_rem_pio2+0x2b0>
 8002c16:	f8dd c018 	ldr.w	ip, [sp, #24]
 8002c1a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8002c1e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8002c22:	f8cd c018 	str.w	ip, [sp, #24]
 8002c26:	f7fd faff 	bl	8000228 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4648      	mov	r0, r9
 8002c30:	4651      	mov	r1, sl
 8002c32:	f7fd fc29 	bl	8000488 <__adddf3>
 8002c36:	4681      	mov	r9, r0
 8002c38:	468a      	mov	sl, r1
 8002c3a:	3701      	adds	r7, #1
 8002c3c:	9b02      	ldr	r3, [sp, #8]
 8002c3e:	429f      	cmp	r7, r3
 8002c40:	dc01      	bgt.n	8002c46 <__kernel_rem_pio2+0x492>
 8002c42:	42b7      	cmp	r7, r6
 8002c44:	dde7      	ble.n	8002c16 <__kernel_rem_pio2+0x462>
 8002c46:	ab48      	add	r3, sp, #288	@ 0x120
 8002c48:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8002c4c:	e9c6 9a00 	strd	r9, sl, [r6]
 8002c50:	3d01      	subs	r5, #1
 8002c52:	e70b      	b.n	8002a6c <__kernel_rem_pio2+0x2b8>
 8002c54:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	dc09      	bgt.n	8002c6e <__kernel_rem_pio2+0x4ba>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	dc2c      	bgt.n	8002cb8 <__kernel_rem_pio2+0x504>
 8002c5e:	d04e      	beq.n	8002cfe <__kernel_rem_pio2+0x54a>
 8002c60:	9b05      	ldr	r3, [sp, #20]
 8002c62:	f003 0007 	and.w	r0, r3, #7
 8002c66:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8002c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c6e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d1f5      	bne.n	8002c60 <__kernel_rem_pio2+0x4ac>
 8002c74:	ab48      	add	r3, sp, #288	@ 0x120
 8002c76:	441c      	add	r4, r3
 8002c78:	4625      	mov	r5, r4
 8002c7a:	46da      	mov	sl, fp
 8002c7c:	f1ba 0f00 	cmp.w	sl, #0
 8002c80:	dc63      	bgt.n	8002d4a <__kernel_rem_pio2+0x596>
 8002c82:	4625      	mov	r5, r4
 8002c84:	46da      	mov	sl, fp
 8002c86:	f1ba 0f01 	cmp.w	sl, #1
 8002c8a:	dc7b      	bgt.n	8002d84 <__kernel_rem_pio2+0x5d0>
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	2100      	movs	r1, #0
 8002c90:	f1bb 0f01 	cmp.w	fp, #1
 8002c94:	f300 8093 	bgt.w	8002dbe <__kernel_rem_pio2+0x60a>
 8002c98:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8002c9c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8002ca0:	9b00      	ldr	r3, [sp, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f040 8092 	bne.w	8002dcc <__kernel_rem_pio2+0x618>
 8002ca8:	9b04      	ldr	r3, [sp, #16]
 8002caa:	e9c3 5600 	strd	r5, r6, [r3]
 8002cae:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8002cb2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8002cb6:	e7d3      	b.n	8002c60 <__kernel_rem_pio2+0x4ac>
 8002cb8:	465d      	mov	r5, fp
 8002cba:	2000      	movs	r0, #0
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	ab48      	add	r3, sp, #288	@ 0x120
 8002cc0:	441c      	add	r4, r3
 8002cc2:	2d00      	cmp	r5, #0
 8002cc4:	da32      	bge.n	8002d2c <__kernel_rem_pio2+0x578>
 8002cc6:	9b00      	ldr	r3, [sp, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d035      	beq.n	8002d38 <__kernel_rem_pio2+0x584>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002cd2:	9c04      	ldr	r4, [sp, #16]
 8002cd4:	2501      	movs	r5, #1
 8002cd6:	e9c4 2300 	strd	r2, r3, [r4]
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8002ce2:	f7fd fbcf 	bl	8000484 <__aeabi_dsub>
 8002ce6:	ac48      	add	r4, sp, #288	@ 0x120
 8002ce8:	45ab      	cmp	fp, r5
 8002cea:	da28      	bge.n	8002d3e <__kernel_rem_pio2+0x58a>
 8002cec:	9b00      	ldr	r3, [sp, #0]
 8002cee:	b113      	cbz	r3, 8002cf6 <__kernel_rem_pio2+0x542>
 8002cf0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	9b04      	ldr	r3, [sp, #16]
 8002cf8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8002cfc:	e7b0      	b.n	8002c60 <__kernel_rem_pio2+0x4ac>
 8002cfe:	2000      	movs	r0, #0
 8002d00:	2100      	movs	r1, #0
 8002d02:	ab48      	add	r3, sp, #288	@ 0x120
 8002d04:	441c      	add	r4, r3
 8002d06:	f1bb 0f00 	cmp.w	fp, #0
 8002d0a:	da08      	bge.n	8002d1e <__kernel_rem_pio2+0x56a>
 8002d0c:	9b00      	ldr	r3, [sp, #0]
 8002d0e:	b113      	cbz	r3, 8002d16 <__kernel_rem_pio2+0x562>
 8002d10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002d14:	4619      	mov	r1, r3
 8002d16:	9b04      	ldr	r3, [sp, #16]
 8002d18:	e9c3 0100 	strd	r0, r1, [r3]
 8002d1c:	e7a0      	b.n	8002c60 <__kernel_rem_pio2+0x4ac>
 8002d1e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8002d22:	f7fd fbb1 	bl	8000488 <__adddf3>
 8002d26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002d2a:	e7ec      	b.n	8002d06 <__kernel_rem_pio2+0x552>
 8002d2c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8002d30:	f7fd fbaa 	bl	8000488 <__adddf3>
 8002d34:	3d01      	subs	r5, #1
 8002d36:	e7c4      	b.n	8002cc2 <__kernel_rem_pio2+0x50e>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	e7c9      	b.n	8002cd2 <__kernel_rem_pio2+0x51e>
 8002d3e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8002d42:	f7fd fba1 	bl	8000488 <__adddf3>
 8002d46:	3501      	adds	r5, #1
 8002d48:	e7ce      	b.n	8002ce8 <__kernel_rem_pio2+0x534>
 8002d4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002d4e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8002d52:	4640      	mov	r0, r8
 8002d54:	4649      	mov	r1, r9
 8002d56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d5a:	f7fd fb95 	bl	8000488 <__adddf3>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4606      	mov	r6, r0
 8002d64:	460f      	mov	r7, r1
 8002d66:	4640      	mov	r0, r8
 8002d68:	4649      	mov	r1, r9
 8002d6a:	f7fd fb8b 	bl	8000484 <__aeabi_dsub>
 8002d6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002d72:	f7fd fb89 	bl	8000488 <__adddf3>
 8002d76:	e865 0102 	strd	r0, r1, [r5], #-8
 8002d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002d7e:	e9c5 6700 	strd	r6, r7, [r5]
 8002d82:	e77b      	b.n	8002c7c <__kernel_rem_pio2+0x4c8>
 8002d84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002d88:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8002d8c:	4640      	mov	r0, r8
 8002d8e:	4649      	mov	r1, r9
 8002d90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d94:	f7fd fb78 	bl	8000488 <__adddf3>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4606      	mov	r6, r0
 8002d9e:	460f      	mov	r7, r1
 8002da0:	4640      	mov	r0, r8
 8002da2:	4649      	mov	r1, r9
 8002da4:	f7fd fb6e 	bl	8000484 <__aeabi_dsub>
 8002da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002dac:	f7fd fb6c 	bl	8000488 <__adddf3>
 8002db0:	e865 0102 	strd	r0, r1, [r5], #-8
 8002db4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002db8:	e9c5 6700 	strd	r6, r7, [r5]
 8002dbc:	e763      	b.n	8002c86 <__kernel_rem_pio2+0x4d2>
 8002dbe:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8002dc2:	f7fd fb61 	bl	8000488 <__adddf3>
 8002dc6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002dca:	e761      	b.n	8002c90 <__kernel_rem_pio2+0x4dc>
 8002dcc:	9b04      	ldr	r3, [sp, #16]
 8002dce:	9a04      	ldr	r2, [sp, #16]
 8002dd0:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8002dd4:	601d      	str	r5, [r3, #0]
 8002dd6:	605c      	str	r4, [r3, #4]
 8002dd8:	609f      	str	r7, [r3, #8]
 8002dda:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8002dde:	60d3      	str	r3, [r2, #12]
 8002de0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002de4:	6110      	str	r0, [r2, #16]
 8002de6:	6153      	str	r3, [r2, #20]
 8002de8:	e73a      	b.n	8002c60 <__kernel_rem_pio2+0x4ac>
 8002dea:	bf00      	nop
 8002dec:	41700000 	.word	0x41700000
 8002df0:	3e700000 	.word	0x3e700000
 8002df4:	00000000 	.word	0x00000000

08002df8 <scalbn>:
 8002df8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8002dfc:	4616      	mov	r6, r2
 8002dfe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002e02:	4683      	mov	fp, r0
 8002e04:	468c      	mov	ip, r1
 8002e06:	460b      	mov	r3, r1
 8002e08:	b982      	cbnz	r2, 8002e2c <scalbn+0x34>
 8002e0a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002e0e:	4303      	orrs	r3, r0
 8002e10:	d035      	beq.n	8002e7e <scalbn+0x86>
 8002e12:	4b2d      	ldr	r3, [pc, #180]	@ (8002ec8 <scalbn+0xd0>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	f7fd fa07 	bl	8000228 <__aeabi_dmul>
 8002e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ecc <scalbn+0xd4>)
 8002e1c:	4683      	mov	fp, r0
 8002e1e:	429e      	cmp	r6, r3
 8002e20:	468c      	mov	ip, r1
 8002e22:	da0d      	bge.n	8002e40 <scalbn+0x48>
 8002e24:	a324      	add	r3, pc, #144	@ (adr r3, 8002eb8 <scalbn+0xc0>)
 8002e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2a:	e019      	b.n	8002e60 <scalbn+0x68>
 8002e2c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8002e30:	42ba      	cmp	r2, r7
 8002e32:	d109      	bne.n	8002e48 <scalbn+0x50>
 8002e34:	4602      	mov	r2, r0
 8002e36:	f7fd fb27 	bl	8000488 <__adddf3>
 8002e3a:	4683      	mov	fp, r0
 8002e3c:	468c      	mov	ip, r1
 8002e3e:	e01e      	b.n	8002e7e <scalbn+0x86>
 8002e40:	460b      	mov	r3, r1
 8002e42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002e46:	3a36      	subs	r2, #54	@ 0x36
 8002e48:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8002e4c:	428e      	cmp	r6, r1
 8002e4e:	dd0a      	ble.n	8002e66 <scalbn+0x6e>
 8002e50:	a31b      	add	r3, pc, #108	@ (adr r3, 8002ec0 <scalbn+0xc8>)
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	4665      	mov	r5, ip
 8002e58:	f363 051e 	bfi	r5, r3, #0, #31
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	481c      	ldr	r0, [pc, #112]	@ (8002ed0 <scalbn+0xd8>)
 8002e60:	f7fd f9e2 	bl	8000228 <__aeabi_dmul>
 8002e64:	e7e9      	b.n	8002e3a <scalbn+0x42>
 8002e66:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8002e6a:	4432      	add	r2, r6
 8002e6c:	428a      	cmp	r2, r1
 8002e6e:	dcef      	bgt.n	8002e50 <scalbn+0x58>
 8002e70:	2a00      	cmp	r2, #0
 8002e72:	dd08      	ble.n	8002e86 <scalbn+0x8e>
 8002e74:	f36f 531e 	bfc	r3, #20, #11
 8002e78:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002e7c:	46ac      	mov	ip, r5
 8002e7e:	4658      	mov	r0, fp
 8002e80:	4661      	mov	r1, ip
 8002e82:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8002e86:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8002e8a:	da09      	bge.n	8002ea0 <scalbn+0xa8>
 8002e8c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8002e90:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8002e94:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8002e98:	480e      	ldr	r0, [pc, #56]	@ (8002ed4 <scalbn+0xdc>)
 8002e9a:	f041 011f 	orr.w	r1, r1, #31
 8002e9e:	e7c1      	b.n	8002e24 <scalbn+0x2c>
 8002ea0:	3236      	adds	r2, #54	@ 0x36
 8002ea2:	f36f 531e 	bfc	r3, #20, #11
 8002ea6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002eaa:	4658      	mov	r0, fp
 8002eac:	4629      	mov	r1, r5
 8002eae:	2200      	movs	r2, #0
 8002eb0:	4b09      	ldr	r3, [pc, #36]	@ (8002ed8 <scalbn+0xe0>)
 8002eb2:	e7d5      	b.n	8002e60 <scalbn+0x68>
 8002eb4:	f3af 8000 	nop.w
 8002eb8:	c2f8f359 	.word	0xc2f8f359
 8002ebc:	01a56e1f 	.word	0x01a56e1f
 8002ec0:	8800759c 	.word	0x8800759c
 8002ec4:	7e37e43c 	.word	0x7e37e43c
 8002ec8:	43500000 	.word	0x43500000
 8002ecc:	ffff3cb0 	.word	0xffff3cb0
 8002ed0:	8800759c 	.word	0x8800759c
 8002ed4:	c2f8f359 	.word	0xc2f8f359
 8002ed8:	3c900000 	.word	0x3c900000
 8002edc:	00000000 	.word	0x00000000

08002ee0 <floor>:
 8002ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8002ee8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8002eec:	2e13      	cmp	r6, #19
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	4605      	mov	r5, r0
 8002ef6:	4680      	mov	r8, r0
 8002ef8:	dc35      	bgt.n	8002f66 <floor+0x86>
 8002efa:	2e00      	cmp	r6, #0
 8002efc:	da17      	bge.n	8002f2e <floor+0x4e>
 8002efe:	a334      	add	r3, pc, #208	@ (adr r3, 8002fd0 <floor+0xf0>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd fac0 	bl	8000488 <__adddf3>
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f7fd fcf0 	bl	80008f0 <__aeabi_dcmpgt>
 8002f10:	b150      	cbz	r0, 8002f28 <floor+0x48>
 8002f12:	2c00      	cmp	r4, #0
 8002f14:	da57      	bge.n	8002fc6 <floor+0xe6>
 8002f16:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8002f1a:	432c      	orrs	r4, r5
 8002f1c:	2500      	movs	r5, #0
 8002f1e:	42ac      	cmp	r4, r5
 8002f20:	4c2d      	ldr	r4, [pc, #180]	@ (8002fd8 <floor+0xf8>)
 8002f22:	bf08      	it	eq
 8002f24:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8002f28:	4623      	mov	r3, r4
 8002f2a:	462a      	mov	r2, r5
 8002f2c:	e024      	b.n	8002f78 <floor+0x98>
 8002f2e:	4f2b      	ldr	r7, [pc, #172]	@ (8002fdc <floor+0xfc>)
 8002f30:	4137      	asrs	r7, r6
 8002f32:	ea01 0c07 	and.w	ip, r1, r7
 8002f36:	ea5c 0c00 	orrs.w	ip, ip, r0
 8002f3a:	d01d      	beq.n	8002f78 <floor+0x98>
 8002f3c:	a324      	add	r3, pc, #144	@ (adr r3, 8002fd0 <floor+0xf0>)
 8002f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f42:	f7fd faa1 	bl	8000488 <__adddf3>
 8002f46:	2200      	movs	r2, #0
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f7fd fcd1 	bl	80008f0 <__aeabi_dcmpgt>
 8002f4e:	2800      	cmp	r0, #0
 8002f50:	d0ea      	beq.n	8002f28 <floor+0x48>
 8002f52:	2c00      	cmp	r4, #0
 8002f54:	bfbe      	ittt	lt
 8002f56:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8002f5a:	4133      	asrlt	r3, r6
 8002f5c:	18e4      	addlt	r4, r4, r3
 8002f5e:	2500      	movs	r5, #0
 8002f60:	ea24 0407 	bic.w	r4, r4, r7
 8002f64:	e7e0      	b.n	8002f28 <floor+0x48>
 8002f66:	2e33      	cmp	r6, #51	@ 0x33
 8002f68:	dd0a      	ble.n	8002f80 <floor+0xa0>
 8002f6a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8002f6e:	d103      	bne.n	8002f78 <floor+0x98>
 8002f70:	f7fd fa8a 	bl	8000488 <__adddf3>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f80:	f04f 3cff 	mov.w	ip, #4294967295
 8002f84:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8002f88:	fa2c f707 	lsr.w	r7, ip, r7
 8002f8c:	4207      	tst	r7, r0
 8002f8e:	d0f3      	beq.n	8002f78 <floor+0x98>
 8002f90:	a30f      	add	r3, pc, #60	@ (adr r3, 8002fd0 <floor+0xf0>)
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	f7fd fa77 	bl	8000488 <__adddf3>
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f7fd fca7 	bl	80008f0 <__aeabi_dcmpgt>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d0c0      	beq.n	8002f28 <floor+0x48>
 8002fa6:	2c00      	cmp	r4, #0
 8002fa8:	da0a      	bge.n	8002fc0 <floor+0xe0>
 8002faa:	2e14      	cmp	r6, #20
 8002fac:	d101      	bne.n	8002fb2 <floor+0xd2>
 8002fae:	3401      	adds	r4, #1
 8002fb0:	e006      	b.n	8002fc0 <floor+0xe0>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8002fb8:	40b3      	lsls	r3, r6
 8002fba:	441d      	add	r5, r3
 8002fbc:	4545      	cmp	r5, r8
 8002fbe:	d3f6      	bcc.n	8002fae <floor+0xce>
 8002fc0:	ea25 0507 	bic.w	r5, r5, r7
 8002fc4:	e7b0      	b.n	8002f28 <floor+0x48>
 8002fc6:	2500      	movs	r5, #0
 8002fc8:	462c      	mov	r4, r5
 8002fca:	e7ad      	b.n	8002f28 <floor+0x48>
 8002fcc:	f3af 8000 	nop.w
 8002fd0:	8800759c 	.word	0x8800759c
 8002fd4:	7e37e43c 	.word	0x7e37e43c
 8002fd8:	bff00000 	.word	0xbff00000
 8002fdc:	000fffff 	.word	0x000fffff

08002fe0 <_init>:
 8002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe2:	bf00      	nop
 8002fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe6:	bc08      	pop	{r3}
 8002fe8:	469e      	mov	lr, r3
 8002fea:	4770      	bx	lr

08002fec <_fini>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	bf00      	nop
 8002ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff2:	bc08      	pop	{r3}
 8002ff4:	469e      	mov	lr, r3
 8002ff6:	4770      	bx	lr
